1 
Propoga'on	  Delay	  and	  State	  
	  
2 
Today’s	  lecture	  
  Propoga'on	  Delay	  
  Timing	  diagrams.	  
  Delay	  of	  ALU32	  
  Storing	  State	  
  SR	  Latch	  
3 
Propoga'on	  Delay	  
  Real	  gates	  don’t	  switch	  instantaneously	  
  There	  is	  a	  latency	  between	  when	  the	  input	  changes	  and	  
the	  output	  changes.	  
  We	  call	  this	  latency	  the	  propagaAon	  delay	  
  Consider	  an	  inverter:	   NOTA	   B	  
A
0
1
B
0
1
Time
propogationt
(input)	   (output)	  
4 
Ring	  Oscillator	  
  What	  happens	  when	  you	  connect	  an	  odd	  number	  of	  
inverters	  in	  a	  circle?	  
NOT NOTNOT
0
1
0
1
Time
0
1
5 
Timing	  analysis	  
	  
  In	  reality,	  'ming	  is	  very	  complicated	  
  The	  delay	  from	  x	  to	  z	  can	  be	  different	  on	  an	  01	  transiAon	  
than	  it	  is	  for	  a	  10	  transiAon.	  	  
  The	  delay	  from	  x	  to	  z	  can	  differ	  from	  the	  delay	  from	  y	  to	  z.	  
  The	  number	  of	  gates	  connected	  to	  the	  same	  output	  (the	  
fanout),	  the	  longer	  it	  will	  take	  to	  switch.	  	  	  
  Long	  wires	  between	  gates	  slow	  things	  down	  as	  well.	  
  In	  this	  class,	  we’ll	  use	  simplifying	  assump'ons:	  
  Delay	  is	  a	  constant	  from	  any	  input	  to	  the	  output.	  
  We’ll	  ignore	  fanout	  and	  wire	  delay	  
NAND
x
y
z
6 
Analyzing	  propaga'on	  delay	  of	  circuits	  
  Assume:	  	  
  Inverter:	  10ps	  delay	  
  2-­‐input	  gate:	  20ps	  delay	  
  4-­‐input	  gate:	  30ps	  delay	  
  Find	  longest	  paths	  from	  input	  to	  output	  
In Out Delay 
X S 
Y S 
Cin S 
X Cout 
Y Cout 
Cin Cout 
7 
Analyzing	  propaga'on	  delay	  
  What	  is	  the	  propoga'on	  delay	  from	  X	  to	  Cout?	  
  Assume:	  	  
  Inverter:	  10ps	  delay	  
  2-­‐input	  gate:	  20ps	  delay	   In Out Delay 
X S 40ps 
Y S 40ps 
Cin S 20ps 
X Cout 
Y Cout 
Cin Cout 
A:	  10ps	  
B:	  20ps	  
C:	  30ps	  
D:	  40ps	  
E:	  60ps	  
8 
  What	  is	  likely	  to	  be	  the	  longest	  path	  through	  this	  circuit?	  
  From	  any	  data	  input	  (A,	  B)	  bit	  to	  any	  output	  bit	  	  
  How	  long	  will	  it	  take?	  
	  
Compu'ng	  the	  delay	  of	  alu32	  
A B ctrl
3
cincout
out
A B ctrl
3
cincout
out
A B ctrl
3
cincout
out
A B ctrl
3
cincout
out
A B ctrl
3
cincout
out
9 
Compu'ng	  components	  from	  ALU1	  
A
B
control[0]
Full 
Adder
0
1
Logic
Unit
carryin
out
carryout
A
B
Cin
Sum
Cout
A
B
R[0]
 out
1-bit ALU slice
control[1]
control[2]
R[1]
XOR
In Out Delay 
A,B out 60ps 
R out 50ps 
In Out Delay 
A,B out 40ps 
R out 50ps 
In Out Delay 
A,B out 20ps 
XOR	  
gate	  
Logic	  	  
Unit	  
2-­‐to-­‐1	  	  
Mul'plexor	  
tPropBCarryout	  +	  30(tPropCarryinCarryout	  )	  +	  tPropCarryinOut	  =	  	  
In Out Delay 
A,B Sum 40ps 
Cin Sum 20ps 
A,B Cout 60ps 
Cin Cout 40ps 
Full	  	  
Adder	  
10 
Thinking	  about	  ALU32’s	  delay	  
  That	  is	  really	  bad.	  	  Really,	  really	  bad.	  
  Processors	  don’t	  really	  implement	  ADDs	  this	  way	  
  This	  is	  what	  is	  called	  a	  “ripple	  carry	  adder”	  
  It	  has	  latency	  O(n)	  where	  n	  is	  the	  #	  bits	  being	  added	  
  There	  are	  much	  smarter	  ways	  to	  handle	  carries	  
  E.g.,	  “carry	  lookahead	  adder”	  	  	  (Google	  it)	  
  Has	  latency	  O(log2(N))	  and	  only	  slightly	  larger	  
  But,	  we	  won’t	  cover	  them	  in	  this	  class.	  
11 
Rings	  of	  Inverters	  
  We	  saw	  an	  odd	  number	  of	  inverters	  creates	  a	  ring	  oscillator:	  
  What	  happens	  if	  you	  have	  an	  even	  number	  of	  inverters?	  
NOT NOTNOT
NOT NOT
12 
Building	  a	  useful	  storage	  mechanism	  
  A	  memory	  should	  have	  at	  least	  three	  proper'es.	  
1.	  It	  should	  be	  able	  to	  hold	  a	  value.	  
2.	  You	  should	  be	  able	  to	  read	  the	  value	  that	  was	  saved.	  
3.	  You	  should	  be	  able	  to	  change	  the	  value	  that’s	  saved.	  
Cross-­‐coupled	  inverters:	   NOT
NOT
Q
Q'
13 
Set/Reset	  Latch	  	  (SR	  latch)	  
  Cross-­‐coupled	  NOR	  gates	  
  Two	  inputs:	  
  reset:	  when	  1,	  sets	  Q=0	  
  set:	  when	  1,	  sets	  Q=1	  
  When	  reset=set=0,	  Q	  keeps	  its	  value	  
  reset=set=1	  causes	  bad	  things.	  	  Make	  sure	  this	  doesn’t	  happen.	  
  This	  circuit	  has	  feedback,	  its	  outputs	  (Q,	  Q’)	  are	  also	  inputs!	  
  Current	  values	  of	  Q,	  Q’	  depend	  on	  past	  values	  of	  Q,	  Q’	  
NOR
NOR
Q
Q'
reset
set
Qt=x	  	  =	  	  
Q’t=x	  =	  	  
14 
Analyzing	  SR	  latch	  
  Case	  1:	  reset	  =	  set	  =	  0	  @	  t	  =	  0	  
  Case	  2:	  reset	  =	  1,	  set	  =	  0	  
  Case	  3:	  reset	  =	  0,	  set	  =	  1	  
Qt=x	  	  =	  (reset	  +	  Q’t=x-­‐1)’	  
Q’t=x	  =	  (set	  +	  Qt=x-­‐1)’	  
Qt=1	  	  =	  	  
Q’t=1	  =	  	  
Qt=1	  	  =	  	  
Q’t=1	  =	  	  
Qt=1	  	  =	  	  
Q’t=1	  =	  	  
15 
Analyzing	  SR	  latch	  
  Case	  3:	  reset	  =	  0,	  set	  =	  1	  
Qt=x	  	  =	  (reset	  +	  Q’t=x-­‐1)’	  
Q’t=x	  =	  (set	  +	  Qt=x-­‐1)’	  
Qt=1	  	  =	  	  
A:	  0	  
B:	  1	  
C:	  Qt=0	  
D:	  Q’t=0	  
17 
Timing	  diagram	  of	  an	  SR	  Latch	  
0
1
0
1
Time
0
1
0
1
R
S
Q'
Q
NOR
NOR
Q
Q'
reset
set
NOR
NOR
Q
Q'
reset
set
