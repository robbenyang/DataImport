Kevin C. Chang
Relational Design Theory
CS411 Database Systems
1
Why Do We Learn This?
Relational Design Theory (1 of 31)Why Do We Learn This? (0 of 8)
• We have designed ER diagram, and translated it into a relational db 
schema R = set of R1, R2, ...
• Now what? 
• We can do the following
• specify all relevant constraints over R
• implement R in SQL
• start using it, making sure the constraints always remain valid
• However, R may not be well‐designed, thus causing us a lot of 
problems
Motivation
Relational Design Theory (2 of 31)Why Do We Learn This? (1 of 8)
This a good design?
Relational Design Theory (3 of 31)
Persons with several phones:
Address SSN Phone
10  Green 123‐321‐99 (201)  555‐1234
10  Green 123‐321‐99  (206)  572‐4312
431 Purple  909‐438‐44  (908)  464‐0028
431 Purple 909‐438‐44 (212)  555‐4000
Why Do We Learn This? (2 of 8)
•Redundancy
•Update anomalies      
•Deletion anomalies
Potential Problems
Relational Design Theory (4 of 31)Why Do We Learn This? (3 of 8)
• Start with the original db schema R
• Transform it until we get a good design R*
• Desirable properties for R*
• must preserve the information of R
• must have minimal amount of redundancy
• must be dependency‐preserving‐‐ if R is associated with a set of 
constraints C, then it should be easy to also check C over R*
• (must also give good query performance) 
How do We Obtain a Good Design?
Relational Design Theory (5 of 31)Why Do We Learn This? (4 of 8)
• How do we recognize a good design R*? 
• How do we transform R into R*?
• What we need is the “theory” of …
OK, But ...
Relational Design Theory (6 of 31)Why Do We Learn This? (5 of 8)
• DB gurus have developed many normal forms
• Most important ones
• Boyce‐Codd, 3rd, and 4th normal forms
• If R* is in one of these forms, then R* is guaranteed to achieve 
certain good properties
• e.g., if R* is in Boyce‐Codd NF, it is guaranteed to not have certain types of 
redundancy
• DB gurus have also developed algorithms to transform R into R* that 
is in some of these normal forms
Normal Forms
Relational Design Theory (7 of 31)Why Do We Learn This? (6 of 8)
• DB gurus have also discussed trade‐offs among normal forms
• Thus, all we have to do is 
• learn these forms
• transform R into R* in one of these forms
• carefully evaluate the trade‐offs
• Many of these normal forms are defined based on various constraints
• functional dependencies and keys
Normal Forms (cont.)
Relational Design Theory (8 of 31)Why Do We Learn This? (7 of 8)
Behind the Scene: Know whom we should 
blame?
Relational Design Theory (9 of 31)Why Do We Learn This? (8 of 8)
Functional Dependencies
Relational Design Theory (10 of 31)Functional Dependencies (0 of 4)
Better Designs Exist
Break the relation into two:
SSN Address
123‐321‐99 10 Green
909‐438‐44 431 Purple
SSN Phone
123‐321‐99 (201) 555‐2334
123‐321‐99 (206) 572‐4312
909‐438‐44 (908) 464‐0028
909‐438‐44 (212) 555‐4000
Functional Dependencies (1 of 4) Relational Design Theory (11 of 31)
• A form of constraint (hence, part of the schema)
• Finding them is part of the database design
• Used heavily in schema refinement
Functional Dependencies
Relational Design Theory (12 of 31)
Definition:
If two tuples agree on the attributes 
then they must also agree on the attributes
Formally:
ܣଵ	ܣଶ …	ܣ௡	
ܤଵ	ܤଶ …ܤ௡	
ܣଵ ܣଶ … ܣ௡ → ܤଵ ܤଶ …ܤ௡	
Functional Dependencies (2 of 4)
• EmpID Name, Phone, Position ?
• Position  Phone ?
• Phone   Position ?
Examples
EmpID Name Phone Position
E0045 Smith 1234 Clerk
E1847 John 9876 Sales
E1111 Smith 9876 Sales
E9999 Mary 1234 Lawyer
Functional Dependencies (3 of 4) Relational Design Theory (13 of 31)
• To check if  ܣ → 	ܤ violation:
• Ignore all other columns
• Check if the remaining relation is many‐one– i.e., functional.
In General
Relational Design Theory (14 of 31)
… A … B  
 X1  Y1  
 X2  Y2  
 …  …  
 
 
Functional Dependencies (4 of 4)
Keys
Relational Design Theory (15 of 31)Keys (0 of 5)
• After defining FDs, we can now define keys
• Key of a relation R is a set of attributes that
• functionally determines all attributes of R
• none of its subsets determines all attributes of R
• Superkey
• a set of attributes that contains a key
• We will need to know the keys of the relations in a DB schema, so 
that we can refine the schema
Relation Keys
Relational Design Theory (16 of 31)Keys (1 of 5)
Finding the Keys of a Relation
Relational Design Theory (17 of 31)
Given a relation constructed from an E/R diagram, what is its key?
Rules:
1.  If the relation comes from an entity set, 
the key of the relation is the set of attributes which is the
key of the entity set.
address name ssn
Person Person(address, name, ssn)
Keys (2 of 5)
Finding the Keys
Relational Design Theory (18 of 31)
PersonbuysProduct
name
price name ssn
buys(name, ssn, date)
date
Rules:
2.  If the relation comes from a many-many relationship, 
the key of the relation include the set of all attribute keys in the
relations corresponding to the entity sets 
(and additional attributes if necessary)
Keys (3 of 5)
Finding the Keys
Relational Design Theory (19 of 31)
But: if there is an arrow from the relationship to E, then
we don’t need the key of E as part of the relation key.
Purchase
Product
Person
Store
Payment Method
name
card-no
ssn
sname
Purchase(name , sname, ssn, card-no)
Keys (4 of 5)
More specific rules:
• Many‐one, one‐many, one‐one relationships
• Multi‐way relationships
• Weak entity sets
(Try to find them yourself)
Finding the Keys
Relational Design Theory (20 of 31)Keys (5 of 5)
Normal Forms
Relational Design Theory (21 of 31)Normal Forms (0 of 10)
•Minimize redundancy
• Avoid info loss
• Preserve dependency
• Ensure good query performance
Desirable Properties of Schema Refinement
Relational Design Theory (22 of 31)Normal Forms (1 of 10)
• A relation R is in BCNF if and only if:
Whenever there is a nontrivial  FD for  R ,
ܣଵ	ܣଶ …	ܣ௡ → ܤ
it is the case that ܣଵ	ܣଶ …	ܣ௡	is a super‐key for R. 
• That is:
Whenever a set of attributes of R is determining another attribute, 
it should determine all attributes of R.
Boyce‐Codd Normal Form
Relational Design Theory (23 of 31)Normal Forms (2 of 10)
Example
Relational Design Theory (24 of 31)
What are the dependencies? Name  City
What are the keys?
Is it in BCNF?
Name City LikeBeer
Alex Champaign IL Bud
Alex Champaign IL Michelob
Bob Urbana IL Bud
Bob Urbana IL Sam Adam
Normal Forms (3 of 10)
