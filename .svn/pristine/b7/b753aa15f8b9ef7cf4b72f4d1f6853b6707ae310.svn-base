1 
Combina(onal	  Logic	  Design	  
	  
	  
2 
Class	  Organiza(on	  
  All	  the	  informa(on	  is	  in	  the	  class	  website	  
  h#ps://wiki.engr.illinois.edu/display/cs398fa13/Home	  
  Piazza	  
  All	  announcements	  will	  go	  through	  piazza	  
3 
Class	  Organiza(on	  
  Sec(ons	  (1	  hour	  Discussion	  Sec(on,	  1	  hour	  Lab)	  
  Can	  work	  individually	  or	  with	  one	  partner	  
  Use	  partners.txt	  to	  indicate	  your	  neEd	  and	  your	  partner’s	  neEd	  
  All	  partners	  must	  make	  their	  own	  submission:	  	  
svn	  commit	  –m	  “Short	  message”	  
  We	  take	  a#endance	  in	  the	  Discussion	  SecEon	  
  can	  miss	  2	  Discussion	  SecEons	  with	  no	  penalty	  
  Come	  to	  the	  labs.	  Many	  resources	  are	  devoted	  to	  help	  you	  
  Assignments/labs	  are	  due	  on	  Sunday	  at	  8:00	  pm	  
  There	  is	  one	  every	  week	  	  
  Can	  submit	  up-­‐to	  48	  hours	  with	  some	  penalty.	  ATer	  that,	  we	  will	  
not	  take	  them.	  	  
  One	  assignment	  can	  be	  turned	  up-­‐to	  48	  hours	  with	  no	  penalty	  
  No	  early	  feedback	  
	  
4 
Class	  Organiza(on	  
  Exams	  
  3	  exams	  
  2nd	  chance	  tesEng	  
  Short	  final,	  not	  yet	  scheduled	  
  Some	  quesEons	  are	  not	  available	  for	  retake.	  	  
  If	  you	  decide	  to	  take	  a	  quesEon	  from	  the	  2nd	  chance	  exam,	  we	  will	  
take	  the	  score	  from	  the	  2nd	  chance	  (it	  may	  be	  higher,	  but	  maybe	  
lower).	  	  
  Lectures	  
  Use	  of	  iclicker:	  Credit	  for	  a#endance	  /	  credit	  for	  the	  correct	  answer	  
  Can	  miss	  3	  lectures	  (where	  I	  use	  iclicker)	  without	  penalty.	  	  
  Plan	  on	  having	  webhomeworks	  
  Will	  give	  you	  more	  informaEon	  about	  this	  soon.	  	  
5 
Today’s	  lecture	  
  Combina(onal	  Logic	  
  Different	  RepresentaEons	  of	  Boolean	  FuncEons	  (review)	  
  How	  to	  design	  any	  circuit	  
  Write	  a	  truth	  table	  
  Sum-­‐of-­‐Products	  implementaEon	  
  Example	  
  Other	  gates	  you	  should	  know	  about	  (XOR,	  NAND,	  NOR)	  
  Divide-­‐and-­‐Conquer	  design	  
6 
Combina(onal	  Logic	  
  Defini(on:	  Boolean	  circuits	  where	  the	  output	  is	  a	  pure	  
func(on	  of	  the	  present	  input	  only.	  
  Circuits	  made	  up	  of	  gates,	  that	  don’t	  have	  any	  feedback	  
  No	  feedback:	  outputs	  are	  not	  connected	  to	  inputs	  
  If	  you	  change	  the	  inputs,	  and	  wait	  for	  a	  while,	  the	  
correct	  outputs	  show	  up.	  
  Real	  circuits	  have	  delays	  (more	  on	  this	  later)	  
  Can	  be	  represented	  by	  Boolean	  Algebra	  
7 
Four	  representa(ons	  of	  Boolean	  func(ons	  
  Equivalent	  func(onality	  
  Rela(vely	  mechanical	  to	  translate	  between	  these	  formats	  
Expressions Truth Tables 
HDLs (Verilog) Gates (Schematics) 
8 
A	  fiTh	  representa(on	  
  An	  English	  descrip(on/specifica(on	  
	  
Example:	  A	  sandwich	  shop	  has	  the	  following	  rules	  for	  making	  a	  good	  
(meat)	  sandwich:	  	  
	  (1)	  All	  sandwiches	  must	  have	  at	  least	  one	  type	  of	  meat.	  
	  (2)	  Don’t	  put	  both	  roast	  beef	  and	  ham	  on	  the	  same	  sandwich.	  	  
	  (3)	  Cheese	  only	  goes	  on	  sandwiches	  that	  include	  turkey.	  	  
	  
Write	  a	  Boolean	  expression	  for	  the	  allowed	  combinaEons	  of	  sandwich	  
ingredients	  using	  the	  following	  variables:	  	  
	  c	  =	  cheese	  
	  h	  =	  ham	  
	  t	  =	  turkey	  	  
	  r	  =	  roast	  beef	  	  
	  
9 
English	  	  	  Truth	  Table	  example	  
  Most	  reliable	  method	  
1.  Write	  a	  truth	  table	  
2.  Every	  row	  evaluaEng	  to	  1	  becomes	  a	  term	  
3.  OR	  all	  the	  terms	  together	  
  This	  will	  give	  an	  un-­‐op(mized	  expression	  
  (we	  can	  write	  computer	  programs	  to	  opEmize	  expressions)	  
  (or	  be#er	  yet,	  use	  the	  ones	  that	  other	  people	  wrote…)	  
  (we	  can’t	  write	  programs	  to	  design	  circuits	  for	  us.)	  
	  
10 
Sum	  of	  Products	  (SOP)	  form	  
  A	  useful	  way	  to	  represent	  any	  Boolean	  expression	  
  A	  sum	  of	  products	  (SOP)	  expression	  contains:	  
  only	  OR	  (sum)	  operaEons	  at	  the	  “outermost”	  level	  
  Each	  term	  that	  is	  summed	  must	  be	  a	  product	  of	  literals	  
  The	  advantage	  is	  that	  any	  sum	  of	  products	  expression	  can	  be	  
implemented	  using	  a	  two-­‐level	  circuit	  
  literals	  and	  complements	  at	  “0th”	  level	  
  AND	  gates	  at	  the	  first	  level	  
  a	  single	  OR	  gate	  at	  the	  second	  level	  
f(x,y,z) = y’ + x’yz’ + xz 
11 
Truth	  tables	  to	  Boolean	  expressions	  
1.   For	  each	  row	  in	  truth	  table	  where	  output	  is	  1	  
  Write	  a	  product	  term	  that	  is	  true	  for	  that	  set	  of	  inputs	  
  And	  only	  for	  that	  set	  of	  inputs	  
  This	  product	  will	  include	  each	  terminal	  exactly	  once	  
2.   OR	  all	  the	  product	  terms	  together	  
	   	  product-­‐term1	  +	  product-­‐term2	  +	  product-­‐term3	  +	  …	  
	  
xy’z	  
12 
Truth	  table	  -­‐>	  Boolean	  -­‐>	  gates	  example	  
Rules:	  	  
(1)	  must	  have	  at	  least	  one	  meat.	  
(2)	  not	  both	  roast	  beef	  and	  ham.	  	  
	  (3)	  cheese	  only	  if	  turkey.	  	  
	  
Ingredients:	   	  c	  =	  cheese	  
	   	  h	  =	  ham	  
	   	  t	  =	  turkey	  	  
	   	  r	  =	  roast	  beef	  	  
c h t r f(..) 
0 0 0 0  
0 0 0 1  
0 0 1 0  
0 0 1 1  
0 1 0 0  
0 1 0 1  
0 1 1 0  
0 1 1 1  
1 0 0 0  
1 0 0 1  
1 0 1 0  
1 0 1 1  
1 1 0 0  
1 1 0 1  
1 1 1 0  
1 1 1 1  
 
Step 1. Write a truth table 
Step 2. Every 1 becomes a term  
a b c d e 
0 0 1 0 0 
1 0 1 0 0 
1 1 0 1 1 
1 1 0 0 1 
13 
Truth	  table	  -­‐>	  Boolean	  -­‐>	  gates	  example	  
c h t r f(..)  
0 0 0 0 0  
0 0 0 1 1 c'h’t’r 
0 0 1 0 1 c'h’tr’  
0 0 1 1 1 c'h’tr 
0 1 0 0 1 c'ht’r’ 
0 1 0 1 0  
0 1 1 0 1 c'htr’ 
0 1 1 1 0  
1 0 0 0 0  
1 0 0 1 0  
1 0 1 0 1 ch’tr’ 
1 0 1 1 1 ch’tr 
1 1 0 0 0  
1 1 0 1 0  
1 1 1 0 1 chtr’ 
1 1 1 1 0  
 
Rules:	  	  
(1)	  must	  have	  at	  least	  one	  meat.	  
(2)	  not	  both	  roast	  beef	  and	  ham.	  	  
	  (3)	  cheese	  only	  if	  turkey.	  	  
	  
Ingredients:	   	  c	  =	  cheese	  
	   	  h	  =	  ham	  
	   	  t	  =	  turkey	  	  
	   	  r	  =	  roast	  beef	  	  
Step 1. Write a truth table 
Step 2. Every 1 becomes a term  
14 
Truth	  table	  -­‐>	  Boolean	  -­‐>	  gates	  example	  
	  	  c h t r f(..)  
0 0 0 0 0  
0 0 0 1 1 c'h’t’r 
0 0 1 0 1 c'h’tr’  
0 0 1 1 1 c'h’tr 
0 1 0 0 1 c'ht’r’ 
0 1 0 1 0  
0 1 1 0 1 c'htr’ 
0 1 1 1 0  
1 0 0 0 0  
1 0 0 1 0  
1 0 1 0 1 ch’tr’ 
1 0 1 1 1 ch’tr 
1 1 0 0 0  
1 1 0 1 0  
1 1 1 0 1 chtr’ 
1 1 1 1 0  
 
Step 3. OR all the terms together 
15 
Truth	  table	  -­‐>	  Boolean	  -­‐>	  gates	  example	  
	  	  c’h’t’r	  +	  c’h’tr’	  +	  c’h’tr	  +	  c’ht’r’	  +	  c’htr’	  +	  ch’tr’	  +	  ch’tr	  +	  chtr’	  
NOT
c
NOT
h
NOT
t
NOT
r
sandwich
16 
Truth	  table	  -­‐>	  Boolean	  -­‐>	  gates	  example	  
	  	  c’h’t’r	  +	  c’h’tr’	  +	  c’h’tr	  +	  c’ht’r’	  +	  c’htr’	  +	  ch’tr’	  +	  ch’tr	  +	  chtr’	  
NOT
c
NOT
h
NOT
t
NOT
r
sandwich
AND
AND
AND
AND
AND
AND
AND
AND
OR
17 
Three	  other	  notable	  2-­‐input	  func(ons	  
  Remember	  this	  table?	  
	  
	  
	  
x y f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 f10 f11 f12 f13 f14 f15 
0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 
0 1 0 0 0 0 1 1 1 1 0 0 0 0 1 1 1 1 
1 0 0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 
1 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 
 
AND	   OR	  
18 
Addi(onal	  Boolean	  opera(ons	  	  
x y (xy)’
0 0 1
0 1 1
1 0 1
1 1 0
x y (x+y)’
0 0 1
0 1 0
1 0 0
1 1 0
NAND 
(NOT-AND) 
NOR 
(NOT-OR) 
XOR 
(eXclusive OR) 
(xy)’ = x’+ y’ (x + y)’ = x’y’ x ⊕ y = x’y + xy’ 
Operation: 
Expressions: 
Truth table: 
Logic gates: 
x y x!y
0 0 0
0 1 1
1 0 1
1 1 0
19 
XOR	  gates	  
  A	  two-­‐input	  XOR	  gate	  outputs	  true	  when	  exactly	  one	  of	  its	  inputs	  is	  true:	  
  XOR	  corresponds	  more	  closely	  to	  typical	  English	  usage	  of	  “either	  …	  or,”	  
either	  of	  the	  two,	  but	  not	  neither	  nor	  both.	  	  
  Several	  fascina(ng	  proper(es	  of	  the	  XOR	  opera(on:	  
x y x!y 
0 0 0 
0 1 1 
1 0 1 
1 1 0 
 
 
x ⊕ y = x’y + xy’ 
x ! 0 = x x ! 1 = x’
x ! x = 0 x ! x’ = 1
x ! (y ! z) = (x ! y) ! z [ Associative ]
x ! y = y ! x [ Commutative ]
20 
x	  XOR	  y	  =	  x’	  XOR	  y’	  
	  
a)	  True	  	  
b)	  False	  
	  
	  
21 
Divide-­‐and-­‐Conquer	  Design	  
  Consider	  the	  following	  problem	  
  You	  are	  building	  system	  to	  help	  avoid	  train	  collisions	  on	  subways.	  	  
  Each	  of	  the	  28	  segments	  of	  track:	  
  Senses	  if	  there	  is	  a	  train	  on	  it	  (T	  =	  1)	  or	  no	  train	  (T	  =	  0)	  
  Has	  a	  red/yellow/green	  stoplight,	  where	  exactly	  1	  light	  is	  on	  at	  a	  Eme	  
–  The	  red	  light	  is	  on	  (R	  =	  1)	  if	  there	  is	  a	  train	  in	  the	  next	  segment	  
–  Otherwise,	  yellow	  is	  on	  (Y	  =	  1)	  if	  a	  train	  is	  2	  segments	  away	  
–  Else,	  green	  is	  on	  (G	  =	  1)	  
  We	  could	  implement	  this	  as	  one	  big	  circuit.	  
28
T
28
28
28 G
Y
R
22 
Proximity	  
sensor	  
23 
Why	  would	  that	  be	  a	  bad	  idea?	  
24 
Divide-­‐and-­‐Conquer	  Design	  
  Instead	  build	  a	  module:	  
  And	  replicate:	  
Xin
Yin
Xout
Yout
T R Y G
Xin
Yin
Xout
Yout
T R Y G
Xin
Yin
Xout
Yout
T R Y G
Xin
Yin
Xout
Yout
T R Y G
25 
What	  is	  Y(Xin,	  Yin)?	  
	  
	  	  	  	  	  	  	  a)	   	  Xin	  ⊕	  Yin	  
	  	  	  	  	  	  	  b)	   	  Xin	  +	  Yin’	  
	  	  	  	  	  	  	  c)	   	  Xin’	  +	  Yin	  
	  	  	  	  	  	  	  d) 	  Xin	  	  Yin’	  
	  	  	  	  	  	  	  e)	   	  Xin’	  	  Yin	  
	  
	  
26 
What	  is	  G(Xin,	  Yin)?	  
	  
a)	  Xin	  OR	  Yin	  
b)	  Xin	  NOR	  Yin	  
c)	  Xin	  AND	  Yin	  
d)	  Xin	  NAND	  Yin	  
e)	  Xin	  XOR	  Yin	  
	  
