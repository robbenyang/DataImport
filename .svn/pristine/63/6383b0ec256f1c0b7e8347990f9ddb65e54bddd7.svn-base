Kevin C. Chang
Relational Algebra
CS411 Database Systems
1
• If you are waiting to register for this class.
Announcements
Relational Algebra (1 of 
41)Opening (1 of 1)
Why Do We Learn This?
Relational Algebra (2 of 
41)Why Do We Learn This? (0 of 2)
Question 1:
How to “query” a database?
Relational Algebra (3 of 
41)
• Goal: specify what we want from our database
Find all the employees who earn more than $50,000 and 
pay taxes in Champaign‐Urbana.
•Write in C++/Java?
• Use high‐level query languages:
• Theoretical: Relational Algebra, Datalog
• Practical: SQL
• Relational algebra: a basic set of operations on relations that 
provide the basic principles.
Why Do We Learn This? (1 of 2)
Question 2: What kinds of “computation” 
can we do on relations?
Relational Algebra (4 of 
41)Why Do We Learn This? (2 of 2)
What is an Algebra?
Relational Algebra (5 of 
41)What is an Algebra? (0 of 4)
• Mathematical system consisting of:
• Operands ‐‐‐ variables or values from which new values can be constructed.
• Operators ‐‐‐ symbols denoting procedures that construct new values from 
given values.
What is an “Algebra”
Relational Algebra (6 of 
41)What is an Algebra? (1 of 4)
• Arithmetic algebra. Linear algebra.
• What are operands?
• What are operators?
Q: Example algebra?
Relational Algebra (7 of 
41)What is an Algebra? (2 of 4)
• An algebra whose operands are relations or variables that represent 
relations.
• Operators are designed to do common things that we need to do 
with relations in a database.
• The result is an algebra that can be used as a query language for 
relations.
What is Relational Algebra?
Relational Algebra (8 of 
41)What is an Algebra? (3 of 4)
•Operators: relations as input, new relation as output
•Basic RA operators:
• Basic Set Operations
• union, difference (no intersection, no complement)
• Selection: 
• Projection: 
• Cartesian Product: X
• Renaming: 
•Derived operations:
• Intersection, complement
• Joins (natural, equi‐join, theta join, semi‐join)
Relational Algebra at a Glance
Relational Algebra (9 of 
41)What is an Algebra? (4 of 4)
Basic Operations
Relational Algebra (10 of 
41)Basic Operations (0 of 13)
• Union, difference
• Binary operations
Set Operations
Relational Algebra (11 of 
41)Basic Operations (1 of 13)
• Union: all tuples in ܴଵor ܴଶ
• Notation: ܴଵ ∪ ܴଶ
• Input: ܴଵ and ܴଶmust have the same schema
• Output: ܴଵ ∪ ܴଶhas the same schema as ܴଵ and ܴଶ
• Example:  
• ܣܿݐ݅ݒ݁ܧ݉݌݈݋ݕ݁݁ݏ ∪ ܴ݁ݐ݅ݎ݁݀ܧ݉݌݈݋ݕ݁݁ݏ
Set Operations: Union
Relational Algebra (12 of 
41)Basic Operations (2 of 13)
• Difference: all tuples in ܴଵ and not in ܴଶ
• Notation: ܴଵ െ ܴଶ
• Input: ܴଵ and ܴଶmust have the same schema
• Output: ܴଵ െ ܴଶhas the same schema as ܴଵ and ܴଶ
• Example:  
• ܣ݈݈ܧ݉݌݈݋ݕ݁݁ݏ	 െ 	ܴ݁ݐ݅ݎ݁݀ܧ݉݌݈݋ݕ݁݁ݏ
Set Operations: Difference
Relational Algebra (13 of 
41)Basic Operations (3 of 13)
• Returns all tuples which satisfy a condition
• Notation:  ߪ௖ሺܴሻ
• c is a condition: =, <, >, and, or, not
• Output schema: same as input schema
• Find all employees with salary more than $40,000:
• ߪ௦௔௟௔௥௬வସ଴଴଴଴ሺEmployeeሻ
Selection 
Relational Algebra (14 of 
41)Basic Operations (4 of 13)
Selection Example
Relational Algebra (15 of 
41)
SSN Name DepartmentID Salary
92881 John 1 30,000
32877 Tony 1 32,000
44544 Amy 2 45,000
௦௔௟௔௥௬வସ଴଴଴଴
Basic Operations (5 of 13)
•Unary operation: returns certain columns
•Eliminates duplicate tuples!
•Notation:    ஺భ,…,஺೙
•Condition:
• Suppose input schema ܴ ܤଵ,… , ܤ௠
• ሼܣଵ, … , ܣ௡ሽ ⊆ ሼܤଵ,… , ܤ௠ሽ	
•Output schema  ଵ ௡
•Example:  ௌௌே,ே௔௠௘
Projection 
Relational Algebra (16 of 
41)Basic Operations (6 of 13)
Projection Example
Relational Algebra (17 of 
41)
SSN Name DepartmentID Salary
92881 John 1 30,000
32877 Tony 1 32,000
44544 Amy 2 45,000
ௌௌே,ே௔௠௘
Basic Operations (7 of 13)
• Think of relation as a table.
• How are they similar?
• How are they different?
• Why do you need both?
Q: Comparing projection and selection?
Relational Algebra (18 of 
41)Basic Operations (8 of 13)
•Each tuple in R1 with each tuple in R2
•Notation:  ଵ ଶ
• Input schemas  ଵ ଵ ௡ ଶ ଵ ௠
•Condition:  ሼܣଵ, … , ܣ௡ሽ ∩ ሼܤଵ, … , ܤ௠ሽ ൌ ∅	
•Output schema is   ଵ ௡ ଵ ௠
•Example:  Employee x Dependents
•Very rare in practice (but joins are very common)
Cartesian Product
Relational Algebra (19 of 
41)Basic Operations (9 of 13)
Relational Algebra (20 of 
41)
Cartesian Product Example 
 
Employee 
Name SSN 
John 999999999 
Tony 777777777 
 
Dependents 
EmployeeSSN Dname 
999999999 Emily 
777777777 Joe 
 
Employee x Dependents 
Name SSN EmployeeSSN Dname 
John 999999999 999999999 Emily 
John 999999999 777777777 Joe 
Tony 777777777 999999999 Emily 
Tony 777777777 777777777 Joe 
 Basic Operations (10 of 13)
• Does not change the relational instance
• Changes the relational schema only
• Notation:  S(B1,…,Bn) (R)
• Input schema: R(A1, …, An)
• Output schema: S(B1, …, Bn)
• Example:
LastName, SocSocNo (Employee)
Renaming
Relational Algebra (21 of 
41)Basic Operations (11 of 13)
Renaming Example
Relational Algebra (22 of 
41)
Employee
Name SSN
John 999999999
Tony 777777777
LastName SocSocNo
John 999999999
Tony 777777777
LastName, SocSocNo (Employee)
Basic Operations (12 of 13)
• Codd proposed R.A. right up front‐‐ in the 1970 CACM paper on 
relational model.
• As a query language? No.
• For defining “data health” by derivability.
Behind the Scene: Why Codd invented rel. algebra?
Relational Algebra (23 of 
41)Basic Operations (13 of 13)
Derived Operations
Relational Algebra (24 of 
41)Derived Operations (0 of 10)
• Difference:  all tuples both in R1 and in R2
• Notation: ܴଵ ∩ ܴଶ	
• Input: ܴଵ, ܴଶ	must have the same schema
• Output: ܴଵ ∩ ܴଶhas the same schema as ܴଵ, ܴଶ
• Example
• UnionizedEmployees ‐ RetiredEmployees
• Intersection is derived:
• ܴଵ ∩ ܴଶ ൌ ܴଵ െ ܴଵ െ ܴଶ
Set Operations: Intersection
Relational Algebra (25 of 
41)Derived Operations (1 of 10)
• Theta join 
• Natural join
• Equi‐join
• Semi‐join
• Inner join
• Outer join
Joins
Relational Algebra (26 of 
41)Derived Operations (2 of 10)
• A join that involves a predicate
• Notation: ܴଵ ⋈ఏ ܴଶ , where  is a condition
• Input schemas: ܴଵሺܣଵ,… , ܣ௡ሻ, ܴଶሺܤଵ, … , ܤ௠ሻ
• ܣଵ, … , ܣ௡ ∩ ܤଵ, … , ܤ௠ ൌ ∅
• Output schema: ܵሺܣଵ,… , ܣ௡, ܤଵ, … , ܤ௠ሻ
• Derived operator:
ܴଵ ⋈ఏ ܴଶ ൌ ߪఏ	ሺܴଵ ൈ ܴଶሻ
Theta Join
Relational Algebra (27 of 
41)Derived Operations (3 of 10)
Example
Relational Algebra (28 of 
41)
Sells( bar, beer, price  ) Bars( name, addr )
Joe’s Bud 2.50 Joe’s Maple St.
Joe’s Miller 2.75 Sue’s River Rd.
Sue’s Bud 2.50
Sue’s Coors 3.00
BarInfo := Sells Sells.bar = Bars.name Bars
BarInfo( bar, beer, price, name, addr )
Joe’s Bud 2.50 Joe’s Maple St.
Joe’s Miller 2.75 Joe’s Maple St.
Sue’s Bud 2.50 Sue’s River Rd.
Sue’s Coors 3.00 Sue’s River Rd.
Derived Operations (4 of 10)
•Notation:  ଵ ଶ
• Input Schema:  ଵ ଵ ௡ ଶ ଵ ௠
•Output Schema:  ଵ ௣
• ܥଵ,… , ܥ௣ ൌ 	 ܣଵ, … , ܣ௡ ∪	ሼܤଵ, … , ܤ௠ሽ
•Meaning: combine all pairs of tuples in  ଵ and  ଶ
that agree on the attributes:
• ܣଵ,… , ܣ௡ ∩	 ܤଵ, … , ܤ௠ , the join attributes.
•Derived operator:
•Q: How to derive it in terms of ܴଵ ൈ ܴଶ and ߪ?
•Example:   Employee  Dependents
Natural Join
Relational Algebra (29 of 
41)Derived Operations (5 of 10)
Relational Algebra (30 of 
41)
Natural Join Example
Employee
Name SSN
John 999999999
Tony 777777777
Dependents
SSN Dname
999999999 Emily
777777777 Joe
Name SSN Dname
John 999999999 Emily
Tony 777777777 Joe
Employee         Dependents = 
Name, SSN, Dname( SSN=SSN2(Employee x SSN2, Dname(Dependents))
Derived Operations (6 of 10)
• Given ܴሺܣ, ܤ, ܥ, ܦሻ, ܵሺܣ, ܥ, ܧሻ,	what is the schema of ܴ ⋈ ܵ ?
• Given ܴሺܣ, ܤ, ܥሻ, ܵሺܦ, ܧሻ,	what is the schema of ܴ ⋈ ܵ ?
• Given ܴሺܣ, ܤሻ, ܵሺܣ, ܤሻ,	what is the schema of ܴ ⋈ ܵ ?
Natural Join
Relational Algebra (31 of 
41)Derived Operations (7 of 10)
• Most frequently used in practice:
ܴଵ ⋈஺ୀ஻ ܴଶ
• Natural join is a particular case of equi‐join.
• A lot of research on how to do it efficiently.
Equi‐join
Relational Algebra (32 of 
41)Derived Operations (8 of 10)
• Basic primitives:
•
• ߪ௖ ܧ
• ߨ஺భ,,..,஺೙ ܧ
• ܧଵ ൈ ܧଶ
• ܧଵ ∪ ܧଶ
• ܧଵ െ ܧଶ
• ߩௌ ஺భ,…,஺೙ ሺܧሻ
•Derived: 
• ܧଵ ⋈ ܧଶ
• ܧଵ ⋈௖ ܧଶ
• ܧଵ ∩ ܧଶ
Summary of Relational Algebra
Relational Algebra (33 of 
41)Derived Operations (9 of 10)
Find the manufacturer of the beers that people in Champaign like.
Relational algebra:
• Join Drinkers(bname, city) with Likes(drinker, beer).
• Join that with Beers(bname, manf).
• Restrict to tuples to Drinker.city = “Champaign, IL”.
• Project over Beers.manf.
Relational calculus:
• Return Beers.manf such that there exists Likes.beer = Beers.name and 
Likes.drinker = Drinkers.name and Drinkers.city = “Champaign, IL”.
Do you see‐‐ So what’s the difference?
Behind the Scene: Other query languages?
Relational Algebra (34 of 
41)Derived Operations (10 of 10)
Complex Expressions
Relational Algebra (35 of 
41)Complex Expressions (0 of 6)
• Create temporary relation names.
• Renaming can be implied by giving relations a list of attributes.
• ଵܺ: ൌ ܦݎ݅݊݇݁ݎݏ ݀݊ܽ݉݁, ܿ݅ݐݕ ⋈ௗ௡௔௠௘ୀௗ௥௜௡௞௘௥ ܮ݅݇݁ݏ ݀ݎ݅݊݇݁ݎ, ܾ݁݁ݎ
• ܺଶ:ൌ ଵܺ ⋈௕௘௘௥ୀ௕௡௔௠௘ ܤ݁݁ݎݏ ܾ݊ܽ݉݁,݂݉ܽ݊
• ܣ݊ݏݓ݁ݎ ܿ݋݉݌ܽ݊ݕ ≔ ߨ௠௔௡௙ሺߪ௖௜௧௬ୀ"௖௛௔௠௣௔௜௚௡"	ܺଶሻ
Sequences of Assignments
Relational Algebra (36 of 
41)Complex Expressions (1 of 6)
• Leaves are operands ‐‐‐ either variables standing for relations or 
particular, constant relations.
• Interior nodes are operators, applied to their child or children.
Expression Trees
Relational Algebra (37 of 
41)Complex Expressions (2 of 6)
• Given Bars(name, addr), Sells(bar, beer, price), find the names of all the bars 
that are either on Maple St. or sell Bud for less than $3.
Example
Relational Algebra (38 of 
41)Complex Expressions (3 of 6)
As a Tree:
Relational Algebra (39 of 
41)
Bars Sells
ߪ price<3 AND beer=“Bud”
ߨ௡௔௠௘ ߨ	bar
∪
ߩோ ௡௔௠௘
ߪ௔ௗௗ௥ୀ"maple st." 
Complex Expressions (4 of 6)
• Using Sells(bar, beer, price), find the bars that sell two different beers 
at the same price.
Q: How to do this?
Relational Algebra (40 of 
41)Complex Expressions (5 of 6)
• Union:  {a,b,b,c} U {a,b,b,b,e,f,f} = {a,a,b,b,b,b,b,c,e,f,f}
• add the number of occurrences
• Difference: {a,b,b,b,c,c} – {b,c,c,c,d} = {a,b,b}
• subtract the number of occurrences
• Intersection: {a,b,b,b,c,c}   {b,b,c,c,c,c,d} = {b,b,c,c}
• minimum of the two numbers of occurrences
• Selection: preserve the number of occurrences
• Projection: preserve the number of occurrences (no duplicate elimination)
• Cartesian product, join: no duplicate elimination
• Read book for detail.
• But, why do we care?
Operations on Bags (and why we care)
Relational Algebra (41 of 
41)Complex Expressions (6 of 6)
