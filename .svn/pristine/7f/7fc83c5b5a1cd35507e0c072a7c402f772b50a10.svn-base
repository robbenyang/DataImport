Non-Relational Data 2: NoSQL   
 
Key concepts: 
1. NoSQL is short for Not Only SQL. 
2. Specifically designed to handle large complex data. 
3. Eliminates certain key features of RDBMS to gain performance. 
 
Details: 
● Slides 1-6 
Data gets bigger and complex. 
RDBMS fails to efficiently complex data. 
Data might be sequence, graph, or data is nested, so they are beyond the capability of 
relational model. 
Some applications might not require features provided by traditional RDBMS like 
consistency. By loosening the requirements one can design a database that is more 
scalable and had improved performance. 
 
● Slide 7 
Scalability and complexity conflict. 
Intuition: Use simple models to represent complex data. 
  
● Slide 8 
NoSQL is short for Not Only SQL. 
Some allow for a SQL-like query language. 
NoSQL encompasses different non-relational databases with different specialized data 
models. Focus on optimizing a specific data model. 
Intuition: Do better for a specific task rather doing well for a general task. 
Take away ACID, e.g., transaction processing.  
 
 
● Slide 9 
Different categories of NoSQL database based on the task it is optimized for. 
 
  
● Slide 10 
Spectrum of NoSQL databases based on data size and complexity.  
Simpler model, e.g., key-value store, allow larger size whereas complex models limit the 
size. 
● Slide 11-17 
Key-value store. 
Store everything as key-value pair. 
Simple data model, allows to increase the performance. 
 
Assign value to the label you want to remember  
Squeeze meaning into the key  
Look up: make up the key, and find in the database 
Speed up: using Hashing 
● Slide 18 
Support limited operations but make them very fast and scalable. 
For e.g., Voldemort a key-value store only supports three basic operation: 
            value = store.get(key) 
store.put(key, value) 
store.delete(key) 
● Slide 19-24 
To make a database scalable, allow it to work with distributed non-reliable storage. 
Consistent hashing -- Key Technique in Voldemort, reduces the number of keys to be 
remapped when the hash table is resized. 
● Slide 25 
Due to simplicity Voldemort achieves a very low latency as compared to a traditional 
RDBMS. 
● Slide 26-30 
Column Family: 
Introduce the notion of an object, by grouping a set of column together which belongs to 
this specific object. 
More intuitive to represent data as compared to a key-value store. 
Each column name is a map. 
 
 
Each row is an object  
Each column is its attribute 
Row: means they are a same object  
Column: attribute name 
Cell Contents: attribute value  
Time Stamp: remember multiple values of different time, keep version of different value  
 
● Slide 31 
Document databases. 
JSON is one example of a document. 
● Slide 32-38 
MongoDB 
● Document-oriented storage: using JSON as an object  
● Full index support:  
● Replication & high availability: replicate data, when server is down, do not fear of it 
● Auto-sharding: data grows bigger, partition efficiently into different servers  
● Map / Reduce 
● GridFS: Managing very big file 
Concepts in Document store 
Collection is a set of document, we can think of it as a table. Each tuple in the 
table is a document. 
  
Represents a row in a column families, but more complex, since we can nested 
information 
Embedding: One document is contained in another. Usually for one‐to‐one or one‐to‐
many relations (faster) 
 Reference: One document is referred in another document. For many‐to‐many 
relations(cleaner) 
 Using object ID 
Embedding V.S. Reference: Embedding has great reading performance, but might result 
in duplication. Reference is more flexible, might not be efficient 
 
● Slide 39 
Graph Databases 
Idea: To support graph data structures and allow efficient graph based traversal. 
 
● Slide 40 
 Neo4j: Graph Database 
High availability 
Fully “ACID” 
Scales to billions of nodes and relationships 
High speed querying through traversals. 
Data model: Nodes, Properties of a node, and Relations between nodes 
 
 
Points to Remember: 
● NoSQL is short for Not Only SQL. 
● Gain performance by eliminating certain features that form basis of RDBMS. 
● Do better for a specific task. 
● Based on task requirement different models with different features. 
 
 
