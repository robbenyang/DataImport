11/21/13 1 
Programming Languages and 
Compilers (CS 421) 
Elsa L Gunter 
2112 SC, UIUC 
http://courses.engr.illinois.edu/cs421 
Based in part on slides by Mattox Beckman, as updated 
by Vikram Adve and Gul Agha 
11/21/13 2 
Untyped λ-Calculus 
n  How do you compute with the  
   λ-calculus? 
n  Roughly speaking, by substitution: 
 
n  (λ x. e1) e2  ⇒* e1 [e2 / x] 
 
n  * Modulo all kinds of subtleties to avoid 
free variable capture 
11/21/13 3 
Transition Semantics for λ-Calculus  
E --> E’’ 
E E’ --> E’’ E’ 
n  Application (version 1 - Lazy Evaluation) 
(λ x . E) E’ --> E[E’/x] 
n  Application (version 2 - Eager Evaluation) 
E’ --> E’’ 
(λ x . E) E’ --> (λ x . E) E’’ 
 
(λ x . E) V --> E[V/x] 
   V - variable or abstraction (value) 
11/21/13 4 
How Powerful is the Untyped λ-Calculus? 
n  The untyped λ-calculus is Turing 
Complete 
n  Can express any sequential computation 
n  Problems:  
n  How to express basic data: booleans, 
integers, etc? 
n  How to express recursion? 
n  Constants, if_then_else, etc, are 
conveniences; can be added as syntactic 
sugar 
11/21/13 5 
Typed vs Untyped λ-Calculus 
n  The pure λ-calculus has no notion of 
type: (f f) is a legal expression 
n  Types restrict which applications are 
valid 
n  Types are not syntactic sugar! They 
disallow some terms 
n  Simply typed λ-calculus is less powerful 
than the untyped λ-Calculus: NOT 
Turing Complete (no recursion) 
11/21/13 6 
Uses of λ-Calculus 
n  Typed and untyped λ-calculus used for 
theoretical study of sequential 
programming languages 
n  Sequential programming languages are 
essentially the λ-calculus, extended with 
predefined constructs, constants, types, 
and syntactic sugar 
n  Ocaml is close to the λ-Calculus: 
   fun x -> exp  --> λ x. exp 
let x = e1 in e2 --> (λ x. e2)e1 
11/21/13 7 
α Conversion 
n   α-conversion: 
λ x. exp --α--> λ y. (exp [y/x]) 
n  Provided that 
1.  y is not free in exp 
2.  No free occurrence of x in exp  
becomes bound in exp when 
replaced by y 
11/21/13 8 
α Conversion Non-Examples 
1. Error: y is not free in termsecond 
  λ x. x y --α--> λ y. y y 
2. Error: free occurrence of x becomes 
bound in wrong way when replaced by 
y 
 λ x. λ y. x y --α--> λ y. λ y. y y 
           exp                     exp[y/x] 
But  λ x. (λ y. y) x --α--> λ y. (λ y. y) y 
And λ y. (λ y. y) y --α--> λ x. (λ y. y) x  
 
11/21/13 9 
Congruence 
n  Let ~ be a relation on lambda 
terms.  ~ is a congruence if  
n  it is an equivalence relation 
n  If e1 ~ e2 then 
n   (e e1) ~ (e e2) and (e1e) ~ (e2 e) 
n   λ x. e1 ~ λ x. e2 
11/21/13 10 
 α Equivalence 
n   α equivalence is the smallest 
congruence containing α 
conversion 
 
n  One usually treats  α-equivalent 
terms as equal - i.e. use  α 
equivalence classes of terms 
11/21/13 11 
Example 
Show: λ x. (λ y. y x) x ~α~ λ y. (λ x. x y) y 
n  λ x. (λ y. y x) x --α--> λ z. (λ y. y z) z  so  
λ x. (λ y. y x) x ~α~ λ z. (λ y. y z) z 
n  (λ y. y z) --α--> (λ x. x z)  so                 
(λ y. y z) ~α~ (λ x. x z)  so                     
λ z. (λ y. y z) z ~α~ λ z. (λ x. x z) z 
n  λ z. (λ x. x z) z --α--> λ y. (λ x. x y) y  so 
λ z. (λ x. x z) z ~α~ λ y. (λ x. x y) y 
n  λ x. (λ y. y x) x ~α~ λ y. (λ x. x y) y 
11/21/13 12 
Substitution 
n  Defined on α-equivalence classes of 
terms 
n  P [N / x] means replace every free 
occurrence of x in P by N 
n  P called redex; N called residue 
n  Provided that no variable free in P 
becomes bound in P [N / x] 
n  Rename bound variables in P to avoid 
capturing free variables of N 
11/21/13 13 
Substitution 
n  x [N / x] = N 
n  y [N / x] = y if y ≠ x 
n  (e1 e2) [N / x] = ((e1 [N / x] ) (e2 [N / x] )) 
n  (λ x. e) [N / x] = (λ x. e)  
n  (λ y. e) [N / x] = λ y. (e [N / x] ) 
provided y ≠ x and y not free in N 
n  Rename y in redex if necessary 
11/21/13 14 
Example 
(λ y. y z) [(λ x. x y) / z] = ? 
n  Problems?  
n  z in redex in scope of y binding 
n  y free in the residue 
n   (λ y. y z) [(λ x. x y) / z] --α-->    
(λ w.w z) [(λ x. x y) / z] =                
λ w. w (λ x. x y)  
11/21/13 15 
Example 
n  Only replace free occurrences 
n  (λ y. y z (λ z. z)) [(λ x. x) / z] = 
λ y. y (λ x. x) (λ z. z) 
Not 
λ y. y (λ x. x) (λ z. (λ x. x)) 
11/21/13 16 
 β reduction 
n   β Rule:  (λ x. P) N --β--> P [N /x] 
 
n  Essence of computation in the lambda 
calculus 
n  Usually defined on α-equivalence 
classes of terms 
11/21/13 17 
Example 
n  (λ z. (λ x. x y) z) (λ y. y z) 
 --β--> (λ x. x y) (λ y. y z) 
 --β--> (λ y. y z) y --β--> y z 
 
n  (λ x. x x) (λ x. x x)  
 --β--> (λ x. x x) (λ x. x x)  
 --β--> (λ x. x x) (λ x. x x) --β--> …. 
11/21/13 18 
 α β Equivalence 
n  α β equivalence is the smallest 
congruence containing α equivalence 
and β reduction  
n  A term is in normal form if no subterm 
is α equivalent to a term that can be β 
reduced 
n  Hard fact (Church-Rosser): if e1 and e2 
are αβ-equivalent and both are normal 
forms, then they are α equivalent 
11/21/13 19 
Order of Evaluation 
n  Not all terms reduce to normal forms 
n  Not all reduction strategies will produce 
a normal form if one exists 
11/21/13 20 
Lazy evaluation: 
n   Always reduce the left-most application 
in a top-most series of applications (i.e. 
Do not perform reduction inside an 
abstraction) 
 
n  Stop when term is not an application, or 
left-most application is not an 
application of an abstraction to a term 
11/21/13 21 
Example 1 
n  (λ z. (λ x. x)) ((λ y. y y) (λ y. y y)) 
n  Lazy evaluation: 
n  Reduce the left-most application: 
n  (λ z. (λ x. x)) ((λ y. y y) (λ y. y y))         
--β-->  (λ x. x) 
 
11/21/13 22 
Eager evaluation 
n  (Eagerly) reduce left of top application 
to an abstraction 
n  Then (eagerly) reduce argument 
n  Then β-reduce the application 
11/21/13 23 
Example 1 
n  (λ z. (λ x. x))((λ y. y y) (λ y. y y)) 
n  Eager evaluation: 
n  Reduce the rator of the top-most application to 
an abstraction: Done. 
n  Reduce the argument: 
n  (λ z. (λ x. x))((λ y. y y) (λ y. y y)) 
--β--> (λ z. (λ x. x))((λ y. y y) (λ y. y y)) 
--β--> (λ z. (λ x. x))((λ y. y y) (λ y. y y))… 
11/21/13 24 
Example 2 
n  (λ x. x x)((λ y. y y) (λ z. z)) 
n  Lazy evaluation: 
(λ x. x  x )((λ y. y y) (λ z. z)) --β-->  
 
11/21/13 25 
Example 2 
n  (λ x. x x)((λ y. y y) (λ z. z)) 
n  Lazy evaluation: 
(λ x. x  x )((λ y. y y) (λ z. z)) --β-->  
 
11/21/13 26 
Example 2 
n  (λ x. x x)((λ y. y y) (λ z. z)) 
n  Lazy evaluation: 
(λ x. x  x )((λ y. y y) (λ z. z)) --β-->  
((λ y. y  y ) (λ z. z)) ((λ y. y  y ) (λ z. z)) 
11/21/13 27 
Example 2 
n  (λ x. x x)((λ y. y y) (λ z. z)) 
n  Lazy evaluation: 
(λ x. x  x )((λ y. y y) (λ z. z)) --β-->  
((λ y. y  y ) (λ z. z)) ((λ y. y  y ) (λ z. z) 
11/21/13 28 
Example 2 
n  (λ x. x x)((λ y. y y) (λ z. z)) 
n  Lazy evaluation: 
(λ x. x  x )((λ y. y y) (λ z. z)) --β-->  
((λ y. y  y ) (λ z. z)) ((λ y. y  y ) (λ z. z)) 
11/21/13 29 
Example 2 
n  (λ x. x x)((λ y. y y) (λ z. z)) 
n  Lazy evaluation: 
(λ x. x  x )((λ y. y y) (λ z. z)) --β-->  
((λ y. y  y ) (λ z. z)) ((λ y. y  y ) (λ z. z))  
--β--> ((λ z. z ) (λ z. z))((λ y. y  y ) (λ z. z)) 
 
 
11/21/13 30 
Example 2 
n  (λ x. x x)((λ y. y y) (λ z. z)) 
n  Lazy evaluation: 
(λ x. x  x )((λ y. y y) (λ z. z)) --β-->  
((λ y. y  y ) (λ z. z)) ((λ y. y  y ) (λ z. z))  
--β--> ((λ z. z ) (λ z. z))((λ y. y  y ) (λ z. z)) 
 
 
11/21/13 31 
Example 2 
n  (λ x. x x)((λ y. y y) (λ z. z)) 
n  Lazy evaluation: 
(λ x. x  x )((λ y. y y) (λ z. z)) --β-->  
((λ y. y  y ) (λ z. z)) ((λ y. y  y ) (λ z. z))  
--β--> ((λ z. z ) (λ z. z))((λ y. y  y ) (λ z. z)) 
 
 
11/21/13 32 
Example 2 
n  (λ x. x x)((λ y. y y) (λ z. z)) 
n  Lazy evaluation: 
(λ x. x  x )((λ y. y y) (λ z. z)) --β-->  
((λ y. y  y ) (λ z. z)) ((λ y. y  y ) (λ z. z))  
--β--> ((λ z. z ) (λ z. z))((λ y. y  y ) (λ z. z)) 
--β--> (λ z. z ) ((λ y. y  y ) (λ z. z)) 
 
11/21/13 33 
Example 2 
n  (λ x. x x)((λ y. y y) (λ z. z)) 
n  Lazy evaluation: 
(λ x. x  x )((λ y. y y) (λ z. z)) --β-->  
((λ y. y  y ) (λ z. z)) ((λ y. y  y ) (λ z. z))  
--β--> ((λ z. z ) (λ z. z))((λ y. y  y ) (λ z. z)) 
--β--> (λ z. z ) ((λ y. y  y ) (λ z. z)) --β-->  
(λ y. y  y ) (λ z. z)  
11/21/13 34 
Example 2 
n  (λ x. x x)((λ y. y y) (λ z. z)) 
n  Lazy evaluation: 
(λ x. x  x )((λ y. y y) (λ z. z)) --β-->  
((λ y. y  y ) (λ z. z) ) ((λ y. y  y ) (λ z. z))  
--β--> ((λ z. z ) (λ z. z))((λ y. y  y ) (λ z. z)) 
--β--> (λ z. z ) ((λ y. y  y ) (λ z. z)) --β-->  
(λ y. y  y ) (λ z. z)  
11/21/13 35 
Example 2 
n  (λ x. x x)((λ y. y y) (λ z. z)) 
n  Lazy evaluation: 
(λ x. x  x )((λ y. y y) (λ z. z)) --β-->  
((λ y. y  y ) (λ z. z) ) ((λ y. y  y ) (λ z. z))  
--β--> ((λ z. z ) (λ z. z))((λ y. y  y ) (λ z. z)) 
--β--> (λ z. z ) ((λ y. y  y ) (λ z. z)) --β-->  
(λ y. y  y ) (λ z. z) ~β~  λ z. z 
11/21/13 36 
Example 2 
n  (λ x. x x)((λ y. y y) (λ z. z)) 
n  Eager evaluation: 
(λ x. x  x) ((λ y. y y) (λ z. z)) --β-->  
(λ x. x  x) (( λ z. z ) (λ z. z)) --β--> 
(λ x. x  x) (λ z. z) --β-->  
(λ z. z) (λ z. z)  --β-->  λ z. z 
11/21/13 37 
 η (Eta) Reduction 
n   η Rule: λ x. f x --η--> f if x not free in f 
n  Can be useful in each direction 
n  Not valid in Ocaml  
n  recall lambda-lifting and side effects 
n  Not equivalent to (λ x. f) x --> f  (inst of β) 
 
n  Example: λ x. (λ y. y) x --η--> λ y. y 
