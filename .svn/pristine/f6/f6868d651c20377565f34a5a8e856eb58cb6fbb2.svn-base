Heap Memory 
CS 241 
Sept. 8, 2013 
 
Physical RAM 
P
1
 V
irtu
al M
e
m
o
ry Sp
ace
 
… 
Stack 
Heap 
Used 
Used 
Used 
From Friday 
- Every process has its own 
addressable space (0x0  
0xF..FF) that consists of its 
virtual memory. 
 
- Both the virtual memory 
and physical memory is 
divided up into fixed size 
pages. 
 
- A page table translates 
virtual addresses into 
physical addresses. 
Code / Data Region: 
… 
void main() { 
   void *a = malloc( 3 * 1024 ); 
   void *b = malloc( 6 * 1024 ); 
   void *c = malloc( 4 * 1024 ); 
   free(b); 
   void *d = malloc( 5 * 1024 ); 
   free(c); 
   void *e = malloc( 4 * 1024 ); 
} 
Start of Heap 
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 KB: 
Heap Memory Strategies 
• Best Fit: 
 
 
• Worst Fit: 
 
 
• Next Fit: 
 
 
• First Fit: 
 
 
 
Start of Heap 
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 
void main() { 
   void *a = malloc( 3 * 1024 ); 
   void *b = malloc( 6 * 1024 ); 
   void *c = malloc( 4 * 1024 ); 
   free(b); 
   void *d = malloc( 5 * 1024 ); 
   free(c); 
   void *e = malloc( 4 * 1024 ); 
} 
KB: 
Heap Allocation Requirements 
 
 
 
 
 
• malloc()/free() requires knowledge about: 
1.   
 
2.   
 
Strategy #1: Dictionary 
• Store a dictionary of all heap entries at the 
beginning of the heap: 
 
 a (FREE) (FREE) c d e 
dictionary 
Start of Heap 
Strategy #1: Dictionary 
• Advantages: 
 
 
 
• Disadvantages: 
 
 
a (FREE) (FREE) c d e 
dictionary 
Start of Heap 
Strategy #2: Metadata 
• Before every entry, store metadata about the 
entry. 
 
 
Start of Heap 
a (FREE) (FREE) c d e 
Strategy #2: Metadata 
• Advantages: 
 
 
 
• Disadvantages: 
 
 
Start of Heap 
a (FREE) (FREE) c d e 
Metadata Optimizations 
Start of Heap 
a (FREE) (FREE) c d e 
Metadata Optimizations 
Start of Heap 
a (FREE) (FREE) c d e 
Metadata Optimizations 
Start of Heap 
a (FREE) (FREE) c d e 
