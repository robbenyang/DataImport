Graphs – traversal 
Objective:  Visit every vertex and every edge, in the graph,
       
Purpose: We can search for interesting substructures in the graph,
       
Contrast graph traversal to BST traversal:
 
•Ordered
•Obvious start
• 
• 
MP7 available, due 12/10, 11:59p. EC due 12/3, 11:59p.
 
Today’s announcements:
Graphs: Traversal - BFS
http://www.cs.duke.edu/csed/jawaa2/examples/BFS.html
http://www.student.seas.gwu.edu/~idsv/idsv.html
CB
A
E
D
F
Graphs: BFS example
A C  B  D 
B A  C  E
C B  A  D  E  F
D A  C  F
E B  C  G
F C  D  G
G E  F  H
H D  G
CB
A
E
D
F
HG
Graphs: Traversal – BFS
Visits every vertex and classifies each edge as 
either “discovery” or “cross”
Algorithm BFS(G)
     Input: graph G
     Output:  labeling of the edges of G 
as discovery edges and back edges
For all u in G.vertices()
   setLabel(u, UNEXPLORED)
For all e in G.edges()
   setLabel(e, UNEXPLORED)
For all v in G.vertices()
   if getLabel(v) = UNEXPLORED
      BFS(G,v)
Algorithm BFS(G,v)
     Input: graph G and start vertex v
     Output:  labeling of the edges of G in the connected component of v as 
discovery edges and cross edges
queue q;
setLabel(v, VISITED)
q.enqueue(v);
While !(q.isEmpty)
   q.dequeue(v)
   For all w in G.adjacentVertices(v)
        if getLabel(w) = UNEXPLORED
              setLabel((v,w),DISCOVERY)
              setLabel(w, VISITED)
              q.enqueue(w)
        else if getLabel((v,w)) = UNEXPLORED
              setLabel((v,w),CROSS)
CB
A
E
D
F
Graphs: BFS example
A C  B  D 
B A  C  E
C B  A  D  E  F
D A  C  F
E B  C  G
F C  D  G
G E  F  H
H D  G
CB
A
E
D
F
HG
While loop 
For loop
TOTAL RUNNING TIME:
Graphs: Traversal - BFS
http://www.cs.duke.edu/csed/jawaa2/examples/BFS.html
http://www.student.seas.gwu.edu/~idsv/idsv.html
CB
A
E
D
F
Graphs: Traversal – BFS
Visits every vertex and classifies each edge as 
either “discovery” or “cross”
Algorithm BFS(G)
     Input: graph G
     Output:  labeling of the edges of G 
as discovery edges and back edges
For all u in G.vertices()
   setLabel(u, UNEXPLORED)
For all e in G.edges()
   setLabel(e, UNEXPLORED)
For all v in G.vertices()
   if getLabel(v) = UNEXPLORED
      BFS(G,v)
Algorithm BFS(G,v)
     Input: graph G and start vertex v
     Output:  labeling of the edges of G in the connected component of v as 
discovery edges and cross edges
queue q;
setLabel(v, VISITED)
q.enqueue(v);
While !(q.isEmpty)
   q.dequeue(v)
   For all w in G.adjacentVertices(v)
        if getLabel(w) = UNEXPLORED
              setLabel((v,w),DISCOVERY)
              setLabel(w, VISITED)
              q.enqueue(w)
        else if getLabel((v,w)) = UNEXPLORED
              setLabel((v,w),CROSS)
CB
A
E
D
F
Graphs: BFS properties
•  
•  
•  
•  
CB
A
E
D
L0
L1
F
L2
BFS
