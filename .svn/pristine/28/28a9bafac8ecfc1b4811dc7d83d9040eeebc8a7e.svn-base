Semi-structured Data: 
Representation/Querying: 
XML/SOAP/JSON 
CS 411 Database Systems 
Mianwei Zhou 
Last Lecture: We learn about ... 
• What is Semi-Structured Data? 
• Why do we need Semi-Structured Data? 
• XML: Language for representing semi-
structure data. 
In this lecture, We will cover 
• What is Semi-Structured Data? 
• Why do we need Semi-Structured Data? 
• XML: Language for representing semi-
structure data. 
• JSON: Another popular semi-structure data 
language. 
• XPath/XQuery: Programing Language for 
Querying XML 
JSON: JavaScript Object Notation 
What is JSON? 
• JSON: stands for JavaScript Object Notation.  
– A text-based open standard designed for human-
readable data interchange.  
– Originally designed by Douglas Crockford. 
– Extended from JavaScript scripting language. 
 
 
How does JSON looks like? 
{ 
“Name”: “Yellowstone National Park”, 
“Location”: [  
{ 
“County”: “Park County”, 
“State”: “Wyoming” },  
{ 
“County”: “Gallatin County”,  
“State”: “Montana” } 
], 
“Coordinates”: { 
“Latitude”: “44°36′ N”, 
“Longitude”: “110°30′ W” }  
} 
yellowstone.json 
JSON Application 1: 
JavaScript Data Structure  
<script language="javascript" > 
var JSONObj = { "name" : 
"tutorialspoint.com", "year" : 2005 }; 
document.write("<h3>Website 
Name="+JSONObj.name+"</h3>"); 
</script> 
A Piece of JavaScript Code 
JSON Application 2:Web Services use 
JSON to provide public data. 
Example: Facebook Graph Query 
https://developers.facebook.com/tools/explorer 
How is JSON different from XML? 
Difference 1: Data Type 
{ 
“Name”: “John Smith”, 
“id”: “join_smith” 
“Age”: 18,  
“Address": {  
“Street": "21 2nd 
Street",  
“City": "New York",  
}  
} 
String 
<person> 
<name id = “join_smith”>   
John Smith </name> 
<age> 18 </age> 
<address>  
<street> 21 2nd Street 
</street> 
<city> New York</city> 
</address> 
</person> 
JSON has different data types 
XML does not have specific  data 
types. Values are all strings. 
String 
Number 
Object 
JSON’s Basic Data Type 
• Number.    
– “height_in_meter”: 3 
• String (enclosed by double quotes): 
– “name”: “yellow stone” 
• Boolean (true/false): 
– “Is_Public_University”: true 
• Null 
– “age”: null 
 
JSON’s Basic Data Type 
• JSON Object: an unordered collection of 
key:value pairs 
– Example 
  
{ 
“County”: “Park County”, 
“State”: “Wyoming” 
} 
Enclose
d by {} 
JSON’s Basic Data Type 
• JSON Array: an ordered sequence of values, 
the values do not need to be of the same type. 
[ 
“Nice”, 
true, 
10, 
null 
... 
] 
Enclose
d by [ ] 
Objects Nested in Array 
[ 
{ 
“Name”: “Yellowstone National Park”, 
“IsNationalPark”: true 
}, 
{ 
“Name”: “Turkey Run State Park”, 
“IsNationalPark”: false 
}, 
{ 
“Name”: “Yosemite National Park”, 
“IsNationalPark”: true 
} 
] 
Array Nested in Object 
{ 
“Name”: “Yellowstone National Park”, 
“Location”: [  
{ 
“County”: “Park County”, 
“State”: “Wyoming” },  
{ 
“County”: “Gallatin County”,  
“State”: “Montana” } 
] 
} 
Use 
Arrays 
in 
Objects 
Object Nested in Object 
{ 
“Name”: “Yellowstone National Park”, 
“Coordinates”: { 
“Latitude”: “44°36′ N”, 
“Longitude”: “110°30′ W”  
}  
} 
Use 
Arrays 
in 
Objects 
Difference 2: Simpler & Smaller 
{ 
“Name”: “John Smith”, 
“id”: “join_smith” 
“Age”: 18,  
“Address": {  
“Street": "21 2nd 
Street",  
“City": "New York",  
}  
} 
String 
<person> 
<name id = “join_smith”>   
John Smith </name> 
<age> 18 </age> 
<address>  
<street> 21 2nd Street 
</street> 
<city> New York</city> 
</address> 
</person> 
To represent the same amount of information, XML is 
usually larger than JSON. 
JSON does not have attributes 
JSON does not repeat tag names 
Summary 
• JSON – Comparison with XML 
– Use Data Types: Number, String, Boolean, null, 
object, array 
– Less verbose 
– Easy to be written by humans. 
We have learned how to represent semi-structured 
data: 
So, the next question will be how to query semi-
structured data. 
For Relational Database, we have SQL;  
For Semi-structure data, we have    ? 
A Movie XML File 
• movies.xml 
(https://dl.dropboxusercontent.com/u/35282
86/movie.xml) 
• Query Example 
– How to list all the titles of movies? 
– How to count the number of movies that are 
directed by each director 
– The number of movies in each genre. 
– ... 
XPath:  
Locate Elements/Attributes in XML 
• XPath: A simple language for describing sets 
of similar paths in a graph of semi-structured 
data. 
 
• Demo: http://www.zorba.io/ 
 
 
<Movie id="movie0"> 
    <Name>Patton</Name> 
    <Directed_By> 
         <Director id="director0">Franklin J. Schaffner</Director> 
    </Directed_By> 
    <Genres>    <Genre>Drama</Genre>     </Genres> 
    <Cast> 
         <Actor id="actor0"> 
              <Name>George C. Scott</Name> 
              <Gender>Male</Gender> 
         </Actor> 
   <Cast> 
</Movie> 
Directly using Tag Name is not good. 
Duplication 
Tree Structure Schema in XML 
<Movie id="movie0"> 
    <Name>Patton</Name> 
    <Directed_By> 
         <Director id="director0">Franklin J. 
Schaffner</Director> 
    </Directed_By> 
    <Genres>    <Genre>Drama</Genre>     
</Genres> 
    <Cast> 
         <Actor id="actor0"> 
              <Name>George C. Scott</Name> 
              <Gender>Male</Gender> 
         </Actor> 
   <Cast> 
</Movie> 
Movie 
Name 
Directed By 
Genres Cast 
Director Genre Actor 
Name Gender 
Each Node in the Tree can be Uniquely 
Identified by a Path 
Movie 
Name 
Directed By 
Genres Cast 
Director Genre Actor 
Name Gender 
Movie -> Cast -> Actor 
Movie -> Directed By -> 
Director 
Basic Design Principle  
of XPATH 
XPath:  
1. Specify XML Document 
• Syntax 
doc(file name) 
• Example: 
doc("https://dl.dropboxusercontent.com/u/35
28286/movie.xml"); 
XPath: 
2. Use path expressions to locate elements 
• Syntax 
𝑇1 𝑇2 𝑇3 … 
• Example 
– List all the movie names 
doc("https://dl.dropboxusercontent.com/u/3528286/mo
vie.xml")/W4F_DOC/Movie/Title 
– List all the director names 
doc(" 
https://dl.dropboxusercontent.com/u/3528286/movie.x
ml ")/W4F_DOC/Movie/Directed_By/Director 
 
 
XPath: 
3. Find Attributes in Path Expression 
• Syntax 
𝑇1 𝑇2 𝑇3 /⋯/@𝐴 
• Example 
– Listing the ids of all movies. 
doc("...")/W4F_DOC/Movie/@id 
• However, this does not work in Zorba, because 
Zorba requires the result should be XML. We 
should rewrite it as a XQuery: 
for $v in doc("...")/W4F_DOC/Movie/Cast/Actor/@id 
return <actor> {$v} </actor> 
XPath: 
4. Use Wildcards in Path Expressions 
• We can use * to match “any tags” 
• Example 
– List both first name and last name of actors 
doc("https://dl.dropboxusercontent.com/u/3528286
/movie.xml ")/W4F_DOC/Movie/Cast/Actor/* 
– List all the genres, 
Complete:  
doc(“...")/W4F_DOC/Movie/Genres/Genre 
If I am lazy: 
doc(“...")/*/*/*/Genre 
 
 
 
 
XPath: 
5. Use Conditions in Path Expression  
• Use [ ] to specify conditions. 
• Example 
– List all movies that are released in 1980. 
 doc("...")/*/Movie[Year=1980]/Title 
– List the first actor of each movie 
  doc("...")/*/ Movie/Cast/Actor[1] 
 
 
 
 
Does XPath have any 
limitation? 
Limitation of XPath: Cannot reorganize 
the results 
• XPath can only return parts of the target XML 
file. 
• XPath CANNOT reorganize the results 
– Order the result, e.g. Order the movies by their 
released year. 
– Aggregate the result, e.g., count the number of 
movies directed by each director. 
– Join result, e.g., list the pairs of actors who have 
co-starred with each other in a movie. 
XQuery 
• XQuery: A query and functional programming 
language that is designed to query and 
transform collections and XML data. 
• Extended from XPath 
• SQL-Style Operations. 
How XQuery is related with SQL 
Name Year Genres 
Patton 1970 ... 
Who’s talking ... ... 
Movie Table XPATH: 
doc(“...")/W4F_DOC/Movie/ 
<movie> 
<name> Patton </name> 
<year> 1970 </year> 
... 
</movie> 
<movie> ...</movie> 
Table Column 
Movie.Name 
Movie.Genres 
{$v/name} 
{$v/Genres/Genre} 
Use $v to name the records 
After the data is prepared, they can be 
handled by the same relational operations 
XQuery Syntax: 
1. For ... Return Clause 
• Syntax 
for variable in XPath 
return expression 
• Example 
List Movies and Their Directors 
 
 
for $v in doc("...")/*/Movie 
return <movie>{$v/Title} 
{$v/Directed_By/Director} </movie> 
XQuery Syntax: 
2. Where Clause 
• Syntax 
where condition 
• Example 
List Movies that are released 
before 1970 
 
 
for $v in doc("...")/*/Movie 
where $v/Year<1970 
return <movie>{$v/Title} {$v/Year} 
</movie> 
XQuery Syntax: 
3. Let Clause 
• Syntax 
let variable:= expression 
• Example 
List Movies that are released 
before 1970 
 
 
let $movies := doc("...")/*/Movie 
for $v in $movies 
where $v/Year<1970 
return <movie>{$v/Title} {$v/Year} 
</movie> 
XQuery Syntax: 
4. Join two data sources 
• Example 
List all the movies that have the 
same director with “'Godfather, The” 
let $movies := doc("...")/*/Movie  
for $v0 in $movies 
for $v1 in $movies 
where $v0/Title='Godfather, The' 
and 
$v0/Directed_By/Director=$v1/Dire
cted_By/Director 
return $v1/Title 
XQuery Syntax: 
5. Group By ... Order By ... Clause 
• Syntax 
Group by variable Order By variable  
• Example: Order directors by the 
number of their movies. 
 for $v in doc("...")/*/Movie 
let $d := $v/Year 
group by $d 
order by count($v) 
return 
<p><Year>{$d}</Year><Num_of_Movie
>{count($v)}</Num_of_Movie></p> 
XQuery have other operators  
• Elimination of Duplicates (Corresponding to 
DISTINCT in SQL) 
– Syntax: distinct-values(*) 
• Quantification in XQuery (Corresponding to 
ANY, SOME, IN in SQL 
– Syntax:  
every variable in expression1 satisfies expression2 
some variable in expression1 satisfies expression2 
• Refer to the textbook for more details! 
 
 
Exercise: List the pairs of actors who have 
co-started with each other in one movie. 
• Answer? 
Exercise: List the pairs of actors who have 
co-started with each other in one movie. 
• Answer: 
 
for $v in 
doc("https://dl.dropboxusercontent.com/u/352
8286/movie.xml")/W4F_DOC/Movie 
for $a1 in $v/Cast/Actor 
for $a2 in $v/Cast/Actor 
where $a1/@id<$a2/@id 
return <co-star>{$a1} {$a2}</co-star> 
Summary 
• What we have learned 
– JSON 
– XPATH 
– XQUERY 
 
Thanks! 
