1 
MP3 available, due 10/08 
Code Challenge 
Lab cancelled this week, but 
 GDB tutorial - 3-5p, 10/4, Siebel 0224 
 Startups at UIUC - 5-7p, 10/4, Siebel 0224 
 
 
Announcements 
3 
6 
4 
4 6 3 
Summary: 
Linked list based implementation of a stack: 
Constant time push and pop. 
Array based implementation of a stack: 
_________ time pop. 
_________ time push if capacity exists, 
Cost over O(n) pushes is ______ for an AVERAGE of 
_________ per push. 
Why consider an array? 
Queues: 
Queue ADT: 
enqueue 
dequeue 
isEmpty 
Stack: 
Queue—linked memory based implementation: 
template<class SIT> 
class Queue { 
public: 
// ctors dtor 
bool empty() const; 
void enqueue(const SIT & e); 
SIT dequeue(); 
private: 
    struct queueNode { 
        SIT data; 
        queueNode * next; 
    }; 
    queueNode * entry; 
    queueNode * exit; 
    int size; 
}; 
8 3 6 4 
Which pointer is “entry” and which is “exit”? 
 
 
 
What is running time of enqueue? 
 
 
 
What is running time of dequeue? 
Queue array based implementation: 
template<class SIT> 
class Queue { 
public: 
Queue(); 
~Queue(); // etc. 
bool empty() const; 
void enqueue(const SIT & e); 
SIT dequeue(); 
private: 
    int capacity; 
    int size; 
    SIT * items; 
    // some other stuff… 
}; 
template<class SIT> 
Queue<SIT>::Queue(){ 
capacity = 8; 
size = 0; 
items = new SIT[capacity]; 
} 
Queue array based implementation: 
template<class SIT> 
class Queue { 
public: 
Queue(); 
~Queue(); // etc. 
bool empty() const; 
void enqueue(const SIT & e); 
SIT dequeue(); 
private: 
    int capacity; 
    int size; 
    SIT * items; 
 
 
}; 
enqueue(3); 
enqueue(8); 
enqueue(4); 
dequeue(); 
enqueue(7); 
dequeue(); 
dequeue(); 
enqueue(2); 
enqueue(1); 
enqueue(3); 
enqueue(5); 
dequeue(); 
enqueue(9); 
Queue array based implementation: 
template<class SIT> 
class Queue { 
public: 
Queue(); 
~Queue(); // etc. 
bool empty() const; 
void enqueue(const SIT & e); 
SIT dequeue(); 
private: 
    int capacity; 
    int size; 
    SIT * items; 
    int entry; 
    int exit; 
    // some other stuff… 
}; 
a m o n d 
exit entry 
enqueue(y); 
enqueue(i); 
enqueue(s); 
dequeue(); 
enqueue(h); 
enqueue(a); 
What if array fills?: 
a y i s h o n d 
exit 
entry 
Another constrained access linear structure - Deque: 
Deque ADT: 
pushFront 
pushRear 
popFront 
popRear 
Implementation Ideas: 
 
