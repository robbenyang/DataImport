1 
MP3 extension until 10/9 11:59pm 
MP4 available, due 10/18, 11:59p. EC due 10/11, 11:59p. 
EWS down Oct 11 9pm to Oct 13 10am 
 Start lab early 
 
 
 
Announcements 
Warmup example: 
Full? 
 
Perfect? 
 
Complete? 
Complete Binary tree:  for any level k in [0,h-1], level k has 2^k nodes, 
and on level h, all nodes are pushed to the left. 
http://xlinux.nist.gov/dads//HTML/completeBinaryTree.html 
Check for understanding:   
Is every full tree complete? 
Is every complete tree full? 
Complete tree of height h, Ch: 
• an empty tree is C-1 
• if h > -1, then Ch is {r, TL, TR}, and either: 
TL is _______ and TR is ________ 
OR 
TL is _______ and TR is ________ 
I U 
L 
A P 
D 
N O 
H 
W 
E 
B 
Rooted, directed, ordered, binary trees 
Tree ADT: 
   insert 
   remove 
   traverse 
template <class T> 
class tree{ 
public: 
… 
private: 
   struct treeNode{ 
      T data; 
      treeNode * left; 
      treeNode * right; 
   }; 
   treeNode * root 
… 
}; 
Theorem:  if there are n data items in a binary tree, then there are ______ null pointers. 
Theorem:  if there are n data items in a binary tree, then there are ______ null pointers. 
continued 
Traversal – scheme for reporting all the data in a structure 
Iterators 
8 3 6 4 
a y i s h o n d 
Traversal – scheme for visiting every node. 
Traversal – scheme for visiting every node. 
• At each node, two choices for direction (left, right) 
• After both subtrees of a node are complete, move back up 
tree 
• Each node is “visited” 3 times in a traversal.  
• Each of those visit times corresponds to a particular kind 
of traversal. 
http://nova.umuc.edu/~jarc/idsv/lesson1.html 
Traversals: 
template<class T> 
void binaryTree<T>::_______Order(treeNode * croot){ 
if (croot != null){ 
 
     ________Order(croot->left); 
 
     ________Order(croot->right); 
 
} 
} 
Traversals: 
template<class T> 
void binaryTree<T>::_______Order(treeNode * croot){ 
if (croot != null){ 
 
     ________Order(croot->left); 
 
     ________Order(croot->right); 
 
} 
} 
Traversals: 
template<class T> 
void binaryTree<T>::_______Order(treeNode * croot){ 
if (croot != null){ 
 
     ________Order(croot->left); 
 
     ________Order(croot->right); 
 
} 
} 
