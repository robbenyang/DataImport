1 An equivalence relation on strings
1.1 Preliminaries
Equivalence Relations
Definition 1. A binary relation R âŠ† AÃ—A is an equivalence relation iff
Reflexivity For every a âˆˆ A, (a, a) âˆˆ R,
Symmetry For every a, b âˆˆ A, if (a, b) âˆˆ R then (b, a) âˆˆ R, and
Transitivity For every a, b, c âˆˆ A, if (a, b) âˆˆ R and (b, c) âˆˆ R then (a, c) âˆˆ R.
For an equivalence relation â‰¡, we will often write a â‰¡ b instead of (a, b) âˆˆâ‰¡.
Definition 2. For an equivalence relation â‰¡âŠ† AÃ—A, the equivalence class of a âˆˆ A (denoted [a]â‰¡)
is given by
[a]â‰¡ = {b âˆˆ A | b â‰¡ a}
The index of â‰¡, denoted as #(â‰¡), is the number of equivalence classes of â‰¡. We will say that â‰¡
has finite index if #(â‰¡) is a finite number.
Example 3. Consider the relation =3âŠ† NÃ—N such that (i, j) âˆˆ=3 iff i mod 3 = j mod 3. It is easy
to see that =3 is reflexive, symmetric, and transitive (and hence an equivalence relation).
The equivalence class of 5 is given by
[5]=3 = {i âˆˆ N | i mod 3 = 2 = 5 mod 3}
The relation =3 has 3 equivalence classes given by
A0 = {i âˆˆ N | i mod 3 = 0}
A1 = {i âˆˆ N | i mod 3 = 1}
A2 = {i âˆˆ N | i mod 3 = 2}
Thus, #(=3) = 3.
Let us consider another equivalence relation =âŠ† N Ã— N such that (i, j) âˆˆ= iff i = j. Now the
equivalence class for any number i is [i]= = {i}. The collection of all equivalence classes of = is
{{i} | i âˆˆ N}. Thus #(=) is infinite.
1.2 An Equivalence Relation on Strings
A Language theoretic equivalence
Definition 4. For any L âŠ† Î£âˆ—, define â‰¡LâŠ† Î£âˆ— Ã— Î£âˆ— such that
x â‰¡L y iff âˆ€z âˆˆ Î£âˆ—. xz âˆˆ Lâ†” yz âˆˆ L
1
Proposition 5. For any language L, â‰¡L is an equivalence relation.
Proof left as exercise.
Examples
Example 6. Let L = {w | w has an odd number of 0s and 1s }. Observe that 110 â‰¡L 000 because
for any z âˆˆ {0, 1}âˆ—
110z âˆˆ L iff z has an odd number of 1s and an even number of 0s iff 000z âˆˆ L
In fact, [110]â‰¡L = {w | w has an even number of 1s and an odd number of 0s}. Consider
Aee = {w | w has an even number of 0s and 1s}
Aoe = {w | w has an even number of 0s and an odd number of 1s}
Aeo = {w | w has an odd number of 0s and an even number of 1s}
Aoo = {w | w has an odd number of 0s and 1s}
Now for any x, y âˆˆ Aee, we can show that x â‰¡L y. Let z be any string. xz âˆˆ L iff z has an odd
number of 0s and 1s iff yz âˆˆ L. Similarly one can show that any pair of strings in Aoe (or Aeo or
Aoo) are equivalent w.r.t. â‰¡L.
On the other hand, if x and y belong to different sets above then x 6â‰¡L y. For example, let
x âˆˆ Aee and y âˆˆ Aoe. Then x10 âˆˆ L (because x10 has an odd number of 0s and 1s). But y10 6âˆˆ L
because y10 has an even number of 0s and an odd number of 1s. The other cases are similar.
Thus, the collection of equivalence classes of â‰¡L is {Aee, Aoe, Aeo, Aoo}. Therefore #(â‰¡L) = 4.
Example 7. Let P = {w |w contains 001 as a substring }. Observe that x = 10 6â‰¡P y = 100 because
taking z = 1, we have xz = 101 6âˆˆ P but yz = 1001 âˆˆ P . On the other hand, 1001 â‰¡P 001 because
for every z, we have 1001z âˆˆ L and 001z âˆˆ L. The equivalence classes of â‰¡P are
A001 = {w | w has 001 as a substring}
A0 = {w | w does not have 001 as substring and ends in 0 and the second last symbol is not 0}
A00 = {w | w does not have 001 as substring and ends in 00}
A1 = {w | w does not have 001 as substring and ends in 1 or is }
One can show that for any two strings x, y that belong to the same set (in the above listing),
x â‰¡P y, and x, y belong to different sets then x 6â‰¡P y. We show these for one particular case;
the rest can be similarly established. Consider x, y âˆˆ A0. Now xz âˆˆ P iff either z has 001 as a
substring or z begins with 01 iff yz âˆˆ L. On the other hand, suppose x âˆˆ A0 and y âˆˆ A00. Take
z = 1. Now yz = y1 âˆˆ P because the last 3 symbols of yz is 001. On the other hand xz = x1 6âˆˆ L
because x1 does not have 001 as a substring.
Since the collection of all equivalence classes of â‰¡P is {A001, A0, A00, A1}, #(â‰¡P ) = 4.
Example 8. Consider L0n1n = {0n1n | n â‰¥ 0}. Consider x = 0i and y = 0j with i 6= j. x 6â‰¡L0n1n y
because 0i1i âˆˆ L0n1n but 0j1i 6âˆˆ L0n1n. In fact, for any i, [0i]â‰¡L0n1n = {0i}. If we consider strings
of the form 0i1j where 1 â‰¤ j â‰¤ i, we have [0i1j ]â‰¡L0n1n = {0k1` |kâˆ’ ` = iâˆ’ j} because 0i1jz âˆˆ L0n1n
iff z = 1jâˆ’i iff 0k1` âˆˆ L0n1n when k âˆ’ ` = i âˆ’ j. Finally, when we consider any two strings x and
y such that x and y are not of the form 0i1j , where j â‰¤ i, we have xz and yz are never in the set
L0n1n, and so (vaccuously) x â‰¡L0n1n y.
Based on the above analysis, #(â‰¡L0n1n) is infinite.
2
Properties of â‰¡L
Proposition 9. For any language L, if x â‰¡L y then for any w, xw â‰¡L yw.
Proof. Assume for contradiction that x â‰¡L y but for some w, xw 6â‰¡L yw. Since xw 6â‰¡L yw, there
is a z such that either (xwz âˆˆ L and ywz 6âˆˆ L) or (xwz 6âˆˆ L and ywz âˆˆ L). In either case, we
can conclude that x 6â‰¡L y because taking zâ€² = wz, we have xzâ€² âˆˆ L and xzâ€² 6âˆˆ L (or xzâ€² 6âˆˆ L and
yzâ€² âˆˆ L). This contradicts the assumption that x â‰¡L y.
2 Myhill-Nerode Theorem
Regular languages have finite index
Proposition 10. Let L be recognized by DFA M with initial state q0. If Î´Ë†M (q0, x) = Î´Ë†M (q0, y) then
x â‰¡L y.
Proof. This proof is essentially the basis of all our DFA lower bound proofs. We repeat the crux
of the argument again here.
Suppose x, y are such that Î´Ë†M (q0, x) = Î´Ë†M (q0, y). It follows that for any z âˆˆ Î£âˆ—, Î´Ë†M (q0, xz) =
Î´Ë†M (q0, yz). Hence, xz is accepted by M iff yz if accepted by M . In other words, xz âˆˆ L(M) = L
iff yz âˆˆ L(M) = L. Thus, x â‰¡L y.
Corollary 11. Let L be a regular language and let k = #(â‰¡L). If M is a DFA that recognizes L
and suppose M has n states, then n â‰¥ k.
Proof. This our lower bound proof technique. It is the contrapositive of the previous proposition
because it says that if x 6â‰¡L y then Î´Ë†M (q0, x) 6= Î´Ë†M (q0, y).
Corollary 12. If L is regular then â‰¡L has finite index.
Proof. If L is regular then there is a DFA M recognizing L. Suppose M has n states. Then by
proposition, we have #(â‰¡L) â‰¤ n, and thus, â‰¡L has finitely many equivalence classes.
Finite Index implies Regularity
Proposition 13. Let L âŠ† Î£âˆ— be such that #(â‰¡L) is finite. Then L is regular.
Proof. Our proof will construct a DFA that recognizes L. Sinceâ‰¡L has finite index, let E1, E2, . . . Ek
be the set of all the equivalence classes of â‰¡L. The states of the DFA ML recognizing L will be the
equivalence classes ofâ‰¡L. The formal construction is as follows. The DFAML = (QL,Î£, Î´L, qL0 , FL)
where
â€¢ QL = {E1, . . . Ek},
3
â€¢ qL0 = []â‰¡L
â€¢ FL = {[x]â‰¡L | x âˆˆ L}; observe that FL is well-defined because if x âˆˆ L and x â‰¡L y then
x âˆˆ L â‡’ y = y âˆˆ L.
â€¢ And Î´L is given by
Î´L([x]â‰¡L , a) = [xa]â‰¡L
Notice that Î´L is well defined because if x â‰¡L y then xa â‰¡L ya.
Correctnes of the above construction requires us to prove that L(ML) = L, i.e., âˆ€w. w âˆˆ L(ML)
iff w âˆˆ L. As for all DFA correctness proofs, this one will also be proved by induction on |w| by
strengthening this statement. We will show
âˆ€w. Î´Ë†ML(qL0 , w) = {[w]â‰¡L}
First observe that if the stronger statement is established then correctness follows because w is
accepted by ML iff Î´Ë†ML(q
L
0 , w)(= {[w]â‰¡L})âˆ©FL 6= âˆ… iff [w]â‰¡L âˆˆ FL iff w âˆˆ L (by definition of FL).
To complete the proof we will show
âˆ€w. Î´Ë†ML(qL0 , w) = {[w]â‰¡L}
by induction on |w|.
â€¢ Base Case When |w| = 0, w = . We know that Î´Ë†ML(q0, ) = {q0} = {[]â‰¡L} since q0 = []â‰¡L
â€¢ Ind. Hyp. Assume that Î´Ë†ML(q0, w) = {[w]â‰¡L} for all w s.t. |w| < n.
â€¢ Ind. Step Consider w = ua such that a âˆˆ Î£ and u âˆˆ Î£nâˆ’1.
Î´Ë†ML(q0, w = ua) = {Î´L(q, a)} where Î´Ë†ML(q0, u) = {q}
= {Î´L([u]â‰¡L , a)} because by ind. hyp. q = [u]â‰¡L
= {[ua = w]â‰¡L}because of the defn. of Î´L
Corollary 14. If L is such that #(â‰¡L) = k then the DFA with the fewest states that recognizes L
has k states.
Proof. We previously showed that #(â‰¡L) is lower bound on the number of statates that any DFA
recognizing L must have. The above construction of the DFA in fact shows that there is a DFA
recognizing L that has exactly k states. Thus, it must be the DFA with fewest states.
Example
4
Example 15. Consider L = {w |w has an odd number of 0s and 1s }. We previously observed that
the equivalence classes of â‰¡L are
Aee = {w | w has an even number of 0s and 1s}
Aoe = {w | w has an even number of 0s and an odd number of 1s}
Aeo = {w | w has an odd number of 0s and an even number of 1s}
Aoo = {w | w has an odd number of 0s and 1s}
Now for w âˆˆ Aee, w0 âˆˆ Aoe and w1 âˆˆ Aeo. Thus in DFA ML the transtion from Aee on 0 will go to
Aoe and on 1 will go to Aeo. Similarly we can figure out the other transtions. The resulting DFA
looks like
Aee Aeo
AooAoe
1
1
1
1
0 0 0 0
Example 16. For the language P = {w | w contains 001 as a substring }, we saw that the set of
equivalence classes are
A001 = {w | w has 001 as a substring}
A0 = {w | w does not have 001 as substring and ends in 0 and the second last symbol is not 0}
A00 = {w | w does not have 001 as substring and ends in 00}
A1 = {w | w does not have 001 as substring and ends in 1 or is }
Once again we can figure out transitions easily. For example, for w âˆˆ A001, w0 and w1 are A001.
The resulting DFA is
A1 A0 A00 A001
1
0
1
0
0
1
0, 1
Myhill-Nerode Theorem
Theorem 17. L is regular iff â‰¡L has finitely many equivalence classes.
Proof. Follows from all the observation made so far.
5
