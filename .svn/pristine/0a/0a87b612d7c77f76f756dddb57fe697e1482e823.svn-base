MP1 grading run for late adders 9/11, 11:59p.
MP2 available, due 9/17, 11:59p.  EC: 9/10, 11:59p.
1
Announcements
Pointers and objects:
face a, b;
… // init b
a = b;
a.setName(“ann”);
string s = b.getName();
face * c, * d;
… // init *d
c = d;
(*c).setName(“carlos”);
string t = d->getName();
class face {
public:
void setName(string n);
string getName();
…
private:
string name;
PNG pic;
boolean done;
};
Arrays:  static (stackic)
int x[5];
Stack memory
loc name type value
Arrays:  dynamic (heap)
int * x;
int size = 3;
x = new int[size];
for(int i=0, i<size, i++)
x[i] = i + 3;
delete [] x;
loc name value
Stack memory
loc name value
Heap memory
A point to ponder:  How is my garden implemented?
class garden{
public:
…
// all the public members
…
private:
   flower ** plot;
   // other stuff
};
Option 1:
Option 2:
Option 3:
Option 4:
Parameter passing: 
struct student {
string name;
PNG mug;
bool printed; // print flag
};
bool print_student1(student s){
if (!s.printed)
cout << s.name << endl;
return true;
}
int main() {
    student a;
    print_student1(a);
}
What happens when we 
run code like this: ?
Parameter passing: 
struct student {
string name;
PNG mug;
bool printed; // print flag
};
bool print_student1(student s){
if (!s.printed)
cout << s.name << endl;
return true;
}
student a;
… // initialize a
a.printed = print_student1(a);
cout << a.printed << endl;
E
xa
m
pl
e 
of
 u
se
Fu
nc
tio
n 
de
fn
Parameter passing: 
void print_student2(student    s){
if (!  s.printed)
cout <<   s.name << endl;
}
student * b;
… // initialize b
print_student2(b);
cout << b.printed << endl;
E
xa
m
pl
e 
of
 u
se
Fu
nc
tio
n 
de
fn
struct student {
string name;
PNG mug;
bool printed; // print flag
};
Parameter passing: 
void print_student3(student    s){
if (!  s.printed)
cout <<   s.name << endl;
}
student c;
… // initialize c
print_student3(c);
cout << c.printed << endl;
E
xa
m
pl
e 
of
 u
se
Fu
nc
tio
n 
de
fn
struct student {
string name;
PNG mug;
bool printed; // print flag
};
