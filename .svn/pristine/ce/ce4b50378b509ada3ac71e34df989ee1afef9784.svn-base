1 
MP1 grading run for late adders, 9/11, 11:59 
MP2 available,  
 MP2.1 due 9/10,  
 MP2 due 9/17, 11:59p.   
 
 
Announcements 
Pointers and objects: 
face a, b; 
… // init b 
a = b; 
a.setName(“ann”); 
b.getName(); 
 
 
 
 
face * c, * d; 
… // init *d 
c = d; 
c->setName(“carlos”); 
(*d).getName(); 
class face { 
public: 
void setName(string n); 
string getName(); 
… 
private: 
string name; 
PNG pic; 
boolean done; 
}; 
Arrays:  static (stackic) 
int x[5]; 
Stack memory 
loc name type value 
Arrays:  dynamic (heap) 
int * x; 
 
int size = 3; 
x = new int[size]; 
 
for(int i=0, i<size, i++) 
x[i] = i + 3; 
 
delete [] x; 
loc name value 
Stack memory 
loc name value 
Heap memory 
A point to ponder:  How is my garden implemented? 
class garden{ 
public: 
… 
// all the public members 
… 
private: 
   flower ** plot; 
   // other stuff 
}; 
Option 1: 
Option 2: 
Option 3: 
Option 4: 
Parameter passing:  
struct student { 
string name; 
PNG mug; 
bool printed; // print flag 
}; 
bool print_student1(student s){ 
if (!s.printed) 
cout << s.name << endl; 
return true; 
} 
int main() { 
    student a; 
    print_student1(a); 
} 
What happens when we 
run code like this: ? 
Parameter passing:  
struct student { 
string name; 
PNG mug; 
bool printed; // print flag 
}; 
bool print_student1(student s){ 
if (!s.printed) 
cout << s.name << endl; 
return true; 
} 
student a; 
… // initialize a 
a.printed = print_student1(a); 
cout << a.printed << endl; 
E
x
a
m
p
le
 o
f 
u
s
e
 
F
u
n
c
ti
o
n
 d
e
fn
 
Parameter passing:  
void print_student2(student    s){ 
if (!  s.printed) 
cout <<   s.name << endl; 
 
} 
student * b; 
… // initialize b 
print_student2(b); 
cout << b.printed << endl; 
E
x
a
m
p
le
 o
f 
u
s
e
 
F
u
n
c
ti
o
n
 d
e
fn
 
struct student { 
string name; 
PNG mug; 
bool printed; // print flag 
}; 
Parameter passing:  
void print_student3(student    s){ 
if (!  s.printed) 
cout <<   s.name << endl; 
 
} 
student c; 
… // initialize c 
print_student3(c); 
cout << c.printed << endl; 
E
x
a
m
p
le
 o
f 
u
s
e
 
F
u
n
c
ti
o
n
 d
e
fn
 
struct student { 
string name; 
PNG mug; 
bool printed; // print flag 
}; 
Parameter passing summary:  
struct stu { 
string n; 
PNG mug; 
bool pt; // print flag 
}; 
bool ps1(stu s){ 
if (!s.pt) 
cout << s.n; 
return true; 
} 
stu a; 
… // init a 
a.pt = ps1(a); 
cout << a.pt; 
E
x
a
m
p
le
 o
f 
u
s
e
 
F
u
n
c
ti
o
n
 d
e
fn
 void ps3(stu & s){ 
if (!s.pt) 
cout << s.n; 
s.pt = true; 
} 
stu c; 
… // init c 
ps3(c); 
cout << c.pt; 
void ps2(stu * s){ 
if (!s->pt) 
cout << s->n; 
s->pt = true; 
} 
stu * b; 
… // init *b 
ps2(b); 
cout << b->pt; 
