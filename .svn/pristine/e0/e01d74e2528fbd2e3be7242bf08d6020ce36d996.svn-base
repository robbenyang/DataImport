Heap Memory, Part 2 
Optimizations and Buddy System 
CS 241 
Sept. 11, 2013 
 
Metadata Optimizations 
Start of Heap 
a (FREE) (FREE) c d e 
Metadata Optimizations 
Start of Heap 
a (FREE) (FREE) c d e 
Metadata Optimizations 
Start of Heap 
a (FREE) (FREE) c d e 
Strategy #3: Buddy System 
• The buddy system consists of segments of 
memory where each segment has a “buddy”. 
– Each segments is always 2n  bytes 
–  The buddy for a segment is flipping the n-th bit: 
•  0b00001000   0b00000000 
 
– A bitmap is maintained for each level of allocation 
to determine if the segment is free or used. 
• 32 B allocation bitmap 
• 16 B allocation bitmap 
• 8 B allocation bitmap 
• … 
 
 
Strategy #3: Buddy System 
0b…000000 
0b…000100 
0b…001000 
0b…000100 
0b…010000 
0b…010100 
0b…011000 
0b…010100 
0b…100000 
Strategy #3: Buddy System 
0b…000000 
0b…000100 
0b…001000 
0b…000100 
0b…010000 
0b…010100 
0b…011000 
0b…010100 
0b…100000 
0 0 0 0 0 0 0 0 
0 0 0 
0 
0 
0 16 B: 
8 B: 
4 B: 
void *a = malloc( 6 ); 
Strategy #3: Buddy System 
    a 
0b…000000 
0b…000100 
0b…001000 
0b…000100 
0b…010000 
0b…010100 
0b…011000 
0b…010100 
0b…100000 
1 1 0 0 0 0 0 0 
1 0 0 
1 
0 
0 16 B: 
8 B: 
4 B: 
void *b = malloc( 3 ); 
Strategy #3: Buddy System 
b     a 
0b…000000 
0b…000100 
0b…001000 
0b…000100 
0b…010000 
0b…010100 
0b…011000 
0b…010100 
0b…100000 
1 1 1 0 0 0 0 0 
1 1 0 
1 
0 
0 16 B: 
8 B: 
4 B: 
void *c = malloc( 11 ); 
Strategy #3: Buddy System 
c b     a 
0b…000000 
0b…000100 
0b…001000 
0b…000100 
0b…010000 
0b…010100 
0b…011000 
0b…010100 
0b…100000 
1 1 1 0 1 1 1 1 
1 1 1 
1 
1 
1 16 B: 
8 B: 
4 B: 
free(b == 0b...001000) 
Strategy #3: Buddy System 
c b     a 
0b…000000 
0b…000100 
0b…001000 
0b…000100 
0b…010000 
0b…010100 
0b…011000 
0b…010100 
0b…100000 
1 1 1 0 1 1 1 1 
1 1 1 
1 
1 
1 16 B: 
8 B: 
4 B: 
1 0 2 
free(b == 0b...001000) 
Strategy Comparison 
• Overhead: 
– Dictionary: 
– Metadata: 
– Buddy System: 
 
• Unusable Space (“Internal Fragmentation”): 
– Dictionary: 
– Metadata: 
– Buddy System: 
Strategy Comparison 
• Find a “best fit” on malloc(): 
– Dictionary: 
– Metadata: 
– Buddy System: 
 
• Find p in data structure on free(p): 
– Dictionary: 
– Metadata: 
– Buddy System: 
MP2 
