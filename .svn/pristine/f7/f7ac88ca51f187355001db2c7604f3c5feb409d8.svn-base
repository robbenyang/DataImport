1 
MP4 available, due 10/18, 11:59p. EC due 10/11, 7:59p. 
EWS down Oct 11 9pm-Oct 13 10am 
 Start lab early 
 
Exam  
Average: 73 
Median: 75 
Announcements 
Traversal – scheme for visiting every node. 
• Each node is “visited” 3 times in a traversal.  
• At each node, two directions to go next and choice of where to 
continue processing 
• Treat subtrees as roots of new trees 
• After both subtrees of a node are complete, move back up tree 
•Each of those visit times corresponds to a particular kind of traversal. 
3 
5 
7 1 
8 
Pre Order: 
 
PostOrder: 
 
InOrder: 
Traversals: A few mechanical questions… 
What is the 2nd letter printed in an inOrder traversal of this tree? 
In what position is C printed in a postOrder traversal of this tree? 
Which traversal prints the data of the tree in ABC order? 
Draw and label a tree containing 8 integers so that an inOrder traversal 
of the tree prints the numbers in order. 
Draw and label a tree containing 8 integers so that a preOrder traversal 
of the tree prints the numbers in order. 
A 
B 
C 
E D 
Traversals:  A few discussion questions… 
template<class T> 
void binaryTree<T>::preOrder(treeNode * croot){ 
if (croot != null){ 
     yell(croot->data); 
     preOrder(croot->left); 
     preOrder(croot->right); 
} 
} 
What is running time?   
Is preOrder public or private?  
 
How could we make this function employ a different function upon a 
visit?   
Traversals: a broader view… 
template<class T> 
treeNode * binaryTree<T>::copy(treeNode * croot){ 
 
 
 
 
 
 
 
} 
Traversals: another broader view… 
template<class T> 
void binaryTree<T>::clear(treeNode * croot){ 
 
 
 
 
 
 
 
} 
