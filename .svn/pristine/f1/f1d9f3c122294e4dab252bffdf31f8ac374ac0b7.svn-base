MP6 extended to 11/20, 11:59p. 
MP7 available due 12/10, EC due 12/03 at 11:59pm. 
Code Challenge delayed to 11/21, 9PM 
My office from 3-4 cancelled today 
 
 
  
 
Today’s announcements: 
Graphs: theory that will help us in analysis 
How many edges? 
At least: 
connected –      
 
not connected -      
At most: 
simple -  
 
not simple - 
Relationship to degree sum: 
X U 
V 
W 
Z 
Y 
a 
c 
b 
e 
d 
f 
g 
h 

deg(v) 
vV

G = (V,E) 
|V| = n 
|E| = m 
Running times often reported in terms of n, the number of vertices, 
but they often depend on m, the number of edges. 
Thm: Every minimally connected graph G=(V,E) has |V|-1 edges. 
Proof:  Consider an arbitrary minimally connected graph G=(V,E). 
Lemma:  Every connected subgraph of G is minimally connected. 
(easy proof by contradiction) 
IH: For any j < |V|, any minimally connected graph of j vertices has j-
1 edges. 
Suppose |V| = 1: A minimally connected graph of 1 vertex has no edges, and 0 = 1-1. 
 
Suppose |V| > 1: Choose any vertex and let d denote its degree.  Remove its 
incident edges, partitioning the graph into _______ components, C0=(____,____), ... 
Cd=(____, ____), each of which is a minimally connected subgraph of G.  This means 
that |Ek| = ________ by _____.   
 
Now we’ll just add up edges in the original graph: 
X U 
V 
W 
Z 
Y 
a 
c e 
f 
h 
Graphs: Toward implementation…(ADT) 
Data: 
Vertices 
Edges 
+ some structure that reflects the 
connectivity of the graph 
X 
V 
W 
Z 
Y 
b 
e 
d 
f 
g 
h 
Functions: (merely a smattering…) 
insertVertex(pair keyData) 
insertEdge(vertex v1, vertex v2, pair keyData) 
 
removeEdge(edge e); 
removeVertex(vertex v); 
 
incidentEdges(vertex v); 
areAdjacent(vertex v1, vertex v2); 
origin(edge e); 
destination(edge e); 
Graphs: Edge List (a first implementation) 
a 
b 
c 
d 
u 
v 
w 
z 
Some functions we’ll compare: 
insertVertex(vertex v) 
removeVertex(vertex v) 
areAdjacent(vertex v, vertex u) 
incidentEdges(vertex v) 
v 
u 
w 
a c 
b 
z 
d 
Graphs: Adjacency Matrix 
v 
u 
w 
a c 
b 
z 
d 
a 
b 
c 
d 
u v w z 
u 
v 
w 
z 
u 
v 
w 
z 
Some functions we’ll compare: 
insertVertex(vertex v) 
removeVertex(vertex v) 
areAdjacent(vertex v, vertex u) 
incidentEdges(vertex v) 
Graphs: Adjacency List 
a 
b 
c 
d 
u 
v 
w 
z 
Some functions we’ll compare: 
insertVertex(vertex v) 
removeVertex(vertex v) 
areAdjacent(vertex v, vertex u) 
incidentEdges(vertex v) 
v 
u 
w 
a c 
b 
z 
d 
Graphs: Asymptotic Performance 
• n vertices, m edges 
• no parallel edges 
• no self-loops 
• Bounds are big-O 
Edge 
List 
Adjacency 
List 
Adjacency 
Matrix 
Space n + m n + m n2 
incidentEdges(v) m deg(v) n 
areAdjacent (v, w) m min(deg(v), deg(w)) 1 
insertVertex(o) 1 1 n2 
insertEdge(v, w, o) 1 1 1 
removeVertex(v) m deg(v) n2 
removeEdge(e) 1 1 1 
