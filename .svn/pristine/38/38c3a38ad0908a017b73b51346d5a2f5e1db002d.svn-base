Kevin C. Chang
SQL 4: Constraints
Database Systems
• Constraints
• Foreign keys
• Enforcing constraints
• Checks
• Attribute‐based checks
• Tuple‐based checks
Concepts You Will Learn
SQL 4: Constraints (1 of 28)Default Section (1 of 2)
Why Do We Learn This?
SQL 4: Constraints (2 of 28)
3
Default Section (2 of 2)
Constraints
SQL 4: Constraints (3 of 28)Constraints (0 of 5)
• A constraint  is a relationship among data elements that the DBMS is 
required to enforce.
• Types of constraints:
• Keys.
• Foreign‐key, or referential‐integrity.
• Value‐based constraints.
• Constrain values of a particular attribute.
• Tuple‐based constraints.
• Relationship among components.
• Assertions: any SQL boolean expression.
Constraints
SQL 4: Constraints (4 of 28)Constraints (1 of 5)
• Consider Relation Sells(bar, beer, price).
• We might expect that a beer value is a real beer ‐‐‐ something 
appearing in Beers.name .
• A constraint that requires a beer in Sells to be some key in Beers is 
called a foreign ‐key constraint.
Foreign Keys
SQL 4: Constraints (5 of 28)Constraints (2 of 5)
• Use the keyword REFERENCES, either:
1. Within the declaration of an attribute, when only one attribute is 
involved.
2. As an element of the schema, as:
FOREIGN KEY ( <list of attributes> )
REFERENCES <relation> ( <attributes> )
• Referenced attributes must be declared PRIMARY KEY or 
UNIQUE.
Expressing Foreign Keys
SQL 4: Constraints (6 of 28)Constraints (3 of 5)
CREATE TABLE Beers (
name CHAR(20) PRIMARY KEY,
manf CHAR(20) );
CREATE TABLE Sells (
bar CHAR(20),
beer CHAR(20) REFERENCES 
Beers(name),
price REAL );
Example: With Attribute
SQL 4: Constraints (7 of 28)Constraints (4 of 5)
CREATE TABLE Beers (
name CHAR(20) PRIMARY KEY,
manf CHAR(20) );
CREATE TABLE Sells (
barCHAR(20),
beer CHAR(20),
price REAL,
FOREIGN KEY(beer) REFERENCES Beers(name));
Example: As Element
SQL 4: Constraints (8 of 28)Constraints (5 of 5)
Enforcing Constraints
SQL 4: Constraints (9 of 28)Enforcing Constraints (0 of 6)
• If there is a foreign‐key constraint from attributes of relation R to 
the primary key of relation S, two violations are possible:
1. An insert or update to R introduces values not found in S.
2. A deletion or update to S causes some tuples of R to “dangle.”
Enforcing Foreign‐Key Constraints
SQL 4: Constraints (10 of 28)Enforcing Constraints (1 of 6)
• Suppose R = Sells, S = Beers.
• An insert or update to Sells that introduces a nonexistent beer must 
be rejected.
• A deletion or update to Beers that removes a beer value found in 
some tuples of Sells can be handled in three ways.
1. Default : Reject the modification.
2. Cascade : Make the same changes in Sells.
 Deleted beer: delete Sells tuple.
 Updated beer: change value in Sells.
3. Set NULL : Change the beer to NULL.
Actions Taken
SQL 4: Constraints (11 of 28)Enforcing Constraints (2 of 6)
• Suppose we delete the Bud tuple from Beers.
• Then delete all tuples from Sells that have beer = ’Bud’.
• Suppose we update the Bud tuple by changing ’Bud’ to ’Budweiser’.
• Then change all Sells tuples with beer = ’Bud’ so that beer = ’Budweiser’. 
Example: Cascade
SQL 4: Constraints (12 of 28)Enforcing Constraints (3 of 6)
• Suppose we delete the Bud tuple from Beers.
• Change all tuples of Sells that have beer = ’Bud’ to have beer = NULL.
• Suppose we update the Bud tuple by changing ’Bud’ to ’Budweiser’.
• Same change.
Example: Set NULL
SQL 4: Constraints (13 of 28)Enforcing Constraints (4 of 6)
• When we declare a foreign key, we may choose policies SET NULL or 
CASCADE independently for deletions and updates.
• Follow the foreign‐key declaration by:
ON [UPDATE, DELETE][SET NULL CASCADE]
• Two such clauses may be used.
• Otherwise, the default (reject) is used.
Choosing a Policy
SQL 4: Constraints (14 of 28)Enforcing Constraints (5 of 6)
CREATE TABLE Sells (
bar CHAR(20),
beer CHAR(20),
price REAL,
FOREIGN KEY(beer)
REFERENCES Beers(name)
ON DELETE SET NULL
ON UPDATE CASCADE );
Example
SQL 4: Constraints (15 of 28)Enforcing Constraints (6 of 6)
Checks
SQL 4: Constraints (16 of 28)Checks (0 of 12)
• Attribute‐based
• Tuple‐based
Checks (not in current MySQL)
SQL 4: Constraints (17 of 28)Checks (1 of 12)
• Put a constraint on the value of a particular attribute.
• CHECK( <condition> ) must be added to the declaration for the 
attribute.
• The condition may use the name of the attribute, but any other 
relation or attribute name must be in a subquery.
Attribute‐Based Checks
SQL 4: Constraints (18 of 28)Checks (2 of 12)
CREATE TABLE Sells (
bar CHAR(20),
beer CHAR(20) CHECK ( beer IN
(SELECT name FROM Beers)),
price REAL CHECK ( price <= 5.00 )
);
Example
SQL 4: Constraints (19 of 28)Checks (3 of 12)
… beer CHAR(20) CHECK ( beer IN
(SELECT name FROM Beers))
… price REAL CHECK (price <= 5.00)
1. The kind of conditions to enforce? 
2. The timing/actions of enforcing?
Q: How is Check different from Foreign Key?
SQL 4: Constraints (20 of 28)Checks (4 of 12)
• An attribute‐based check is checked only when a value for that 
attribute is inserted or updated.
• Example: CHECK (price <= 5.00) checks every new price and rejects it if it is 
more than $5.
• Example: CHECK (beer IN (SELECT name FROM Beers)) not checked if a beer 
is deleted from Beers (unlike foreign‐keys).
Timing of Checks
SQL 4: Constraints (21 of 28)Checks (5 of 12)
• CHECK ( <condition> ) may be added as another element of a schema 
definition.
• The condition may refer to any attribute of the relation, but any 
other attributes or relations require a subquery.
• Checked on insert or update only.
Tuple‐Based Checks
SQL 4: Constraints (22 of 28)Checks (6 of 12)
•Only Joe’s Bar can sell beer for more than $5:
CREATE TABLE Sells (
bar CHAR(20),
beer CHAR(20),
price REAL,
CHECK (bar = ’Joe’’s Bar’ OR
price <= 5.00)
);
Example: Tuple‐Based Check
SQL 4: Constraints (23 of 28)Checks (7 of 12)
• We can do attribute‐based check, why tuple level? 
• Give examples that you need to use tuple check.
Q: Why do we need tuple‐level check?
SQL 4: Constraints (24 of 28)Checks (8 of 12)
• These are database‐schema elements, like relations or views.
• Defined by:
CREATE ASSERTION <name>
CHECK ( <condition> );
• Condition may refer to any relation or attribute in the database 
schema.
Assertions (not in current MySQL)
SQL 4: Constraints (25 of 28)Checks (9 of 12)
• No bar may charge an average of more than $5.
CREATE ASSERTION NoRipoffBars CHECK (
NOT EXISTS (
SELECT bar FROM Sells
GROUP BY bar
HAVING 5.00 < AVG(price)
));
Example: Assertion
SQL 4: Constraints (26 of 28)Checks (10 of 12)
• In Drinkers(name, addr, phone) and Bars(name, 
addr, license), there cannot be more bars than 
drinkers.
CREATE ASSERTION FewBar CHECK (
(SELECT COUNT(*) FROM Bars) <=
(SELECT COUNT(*) FROM Drinkers)
);
Example: Assertion
SQL 4: Constraints (27 of 28)Checks (11 of 12)
• In principle, we must check every assertion after every modification 
to any relation of the database.
• A clever system can observe that only certain changes could cause a 
given assertion to be violated.
• Example: No change to Beers can affect FewBar.  Neither can an insertion to 
Drinkers.
Timing of Assertion Checks
SQL 4: Constraints (28 of 28)Checks (12 of 12)
