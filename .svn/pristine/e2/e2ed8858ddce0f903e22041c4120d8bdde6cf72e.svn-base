Today’s announcements: 
Course policies: http://cs.illinois.edu/class/cs225 
general assistance (ews, svn, etc.) - post to piazza 
HW0 available, due 9/4 before lecture. 
MP1 available, due 9/3, 11:59p.  
Today’s plan: 
Ideas/concepts: 
Class definitions 
Class member functions - declaration and implementation 
Constructors 
Clients 
OOP: C++ 
I 
E 
P 
Our first class… 
class sphere{ 
}; 
#include “sphere.h” 
 
int main(){ 
sphere a; 
} 
1. Upon command > g++ main.cpp does this code compile? 
2.    Upon command > ./a.out does it run? 
main.cpp sphere.h 
What surprises you about this code? 
Access control and encapsulation: 
1. Upon command > g++ main.cpp does this code compile? 
• Upon command > ./a.out does it run? 
• In c++ class members are, by default, “private”.  Why would we want to hide 
our representation of an object from a client? 
• How many collaborators are you allowed to have for MPs in this class? 
main.cpp sphere.h 
class sphere{ 
   double theRadius; 
}; 
#include “sphere.h” 
#include <iostream> 
using namespace std; 
 
int main(){ 
sphere a; 
cout << a.theRadius << endl; 
} 
What surprises you about this code? 
Structure of a class defn (cont): 
class sphere{ 
// member fn and data 
public: 
sphere(); 
sphere(double r); 
void setRadius(double newRad); 
double getDiameter(); 
 
private: 
double theRadius; 
}; 
int main(){ 
 
 
 
 
 
}; 
sphere functionality: 
1. Create a new one. 
2. Change an existing one. 
3. Get information about one. 
sphere representation: 
 radius 
Structure of a class defn (cont): 
class sphere{ 
public: 
sphere(); 
sphere(double r); 
void setRadius(double newRad); 
double getDiameter() const; 
… 
 
private: 
double theRadius; 
}; 
//constructor(s) (next page) 
 
void sphere::setRadius(double newRad){ 
 
 
} 
 
double sphere::getDiameter() const { 
 
 
} 
… 
Asides: 
______: 
 
__: 
sphere.cpp sphere.h 
Constructors (intro): 
… 
//default constructor 
sphere::sphere(){ 
 
} 
 
//default constructor, alternative 
sphere::sphere() 
{ 
 
} 
 
//constructor with given radius 
sphere::sphere(double r){ 
 
 
 
 
} 
… 
int main(){ 
 
 
 
 
} 
Points to remember abt ctors: 
1. 
 
 
2. 
 
 
3.   
When you declare a sphere, a sphere class constructor is invoked. 
sphere.cpp 
Class Definition… where are we? 
Today’s plan: 
Ideas/concepts: 
Class definitions 
Class function implementation 
Constructors 
Clients 
OOP: we now understand how C++ achieves 
I 
Encapsulation: 
 1) 
 2) 
P 
9 
