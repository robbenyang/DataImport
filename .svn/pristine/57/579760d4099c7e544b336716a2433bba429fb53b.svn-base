Kevin C. Chang
Relation Model
CS411 Database Systems
1
Why Do We Learn This?
Relation Model (1 of 38)Why Do We Learn This? (0 of 2)
Database Modeling & Implementation
Relation Model (2 of 38)
ER Model: Diagrams
Why Do We Learn This? (1 of 2)
DBMS
Relational Model: Tables
• Both are used to model data
• ER model has many concepts
• entities, relationships, attributes, etc.
• well‐suited for capturing the app. requirements
• not well‐suited for computer implementation
• does not even have operations on its structures
• Relational model
• has just a single concept: relation
• world is represented with a collection of tables
• well‐suited for efficient manipulations on computers
ER Model vs. Relational Model
Relation Model (3 of 38)Why Do We Learn This? (2 of 2)
The Basics
Relation Model (4 of 38)The Basics (0 of 8)
An Example of a Relation
Relation Model (5 of 38)
Name               Price                Category            Manufacturer
gizmo               $19.99            gadgets             GizmoWorks
Power gizmo   $29.99            gadgets             GizmoWorks
SingleTouch $149.99          photography     Canon
MultiTouch $203.99          household         Hitachi
tuples
Attribute names
Table name
Products:
The Basics (1 of 8)
• Each attribute has a type
• Must be atomic type (why?  see later)
• Called domain 
• Examples:
• Integer
• String
• Real
• …
Domains
Relation Model (6 of 38)The Basics (2 of 8)
The Schema of a Relation:
• Relation name plus attribute names
• Product(Name, Price, Category, Manufacturer)
• In practice we add the domain for each attribute
The Schema of a Database
• A set of relation schemas
• Product(Name, Price, Category, Manufacturer),
• Vendor(Name, Address, Phone),
. . . . . . .
Schemas
Relation Model (7 of 38)The Basics (3 of 8)
•Relational schema = R(A1,…,Ak):
Instance = relation with k attributes (of “type” R)
• values of corresponding domains
•Database schema = R1(…), R2(…), …, Rn(…)
Instance = n relations, of types R1, R2, ..., Rn
Instances
Relation Model (8 of 38)The Basics (4 of 8)
• The database maintains a current database state.
• Updates to data: Frequently – Why?
• add a tuple
• delete a tuple
• modify an attribute in a tuple
• Updates to schema: Infrequently. Painful ‐‐‐Why?
• add/delete an attribute
• add/delete a table
Updates
Relation Model (9 of 38)The Basics (5 of 8)
Think of it as columns vs. rows
Think of an example, answer following:
For Schema:
• When do you determine a schema?
• How often do you change your mind?
For Instance:
• When do you determine an instance?
• How often do you change your mind?
Q: Schema vs. Instances
Relation Model (10 of 38)The Basics (6 of 8)
Relation Model (11 of 38)
Behind the Scene: Database Turing Awards?
1966 A.J. Perlis
1967Maurice V. Wilkes
1968 Richard Hamming
1969Marvin Minsky
1970 J.H. Wilkinson
1971 John McCarthy
1972 E.W. Dijkstra
1973 Charles W. Bachman
1974 Donald E. Knuth
1975 Allen Newell
1975 Herbert A. Simon
1976Michael O. Rabin
1977 John Backus
121978 Robert W. Floyd
1979 Kenneth E. Iverson
1980 C. Antony R. Hoare
1981 Edgar F. Codd
1982 Stephen A. Cook
1983 Ken Thompson
1983 Dennis M. Ritchie
1984 Niklaus Wirth
1985 Richard M. Karp
1986 John Hopcroft
1986 Robert Tarjan
1987 John Cocke
1988 Ivan Sutherland
1989 William (Velvel) Kahan
1990 Fernando J. Corbato'
1991 Robin Milner
1992 Butler W. Lampson
1993 Juris Hartmanis
1993 Richard E. Stearns
1994 Edward Feigenbaum
1994 Raj Reddy
1995 Manuel Blum
1996 Amir Pnueli
1997 Douglas Engelbart
1998 James Gray
1999 Frederick P. Brooks, Jr. 
2000 Andrew Chi-Chih Yao
The Basics (7 of 8)
Relation Model (12 of 38)
Behind the Scene: It’s all about modeling
•1973 Charles W. Bachman
•1981 Edgar F. Codd
•1998 James Gray
Who’s who?
What have they contributed?
And we certainly need more!
13The Basics (8 of 8)
Defining DB Schema in SQL
Relation Model (13 of 38)Defining DB Schema in SQL (0 of 7)
• Simplest form is:
CREATE TABLE <name> (
<list of elements>
);
• And you may remove a relation from the database schema by:
DROP TABLE <name>;
• The principal element is a pair consisting of an attribute and a type.
• The most common types are:
• INT or INTEGER (synonyms).
• REAL or FLOAT (synonyms).
• CHAR(n ) = fixed‐length string of n characters.
• VARCHAR(n ) = variable‐length string of up to n characters.
Declaring a Relation
Relation Model (14 of 38)Defining DB Schema in SQL (1 of 7)
CREATE TABLE Sells (
bar CHAR(20),
beer VARCHAR(20),
price REAL
);
Example: Create Table
Relation Model (15 of 38)Defining DB Schema in SQL (2 of 7)
• An attribute or list of attributes may be declared PRIMARY KEY or 
UNIQUE.
• Single‐attribute keys:
CREATE TABLE Beers (
name CHAR(20) UNIQUE,
manf CHAR(20)
);
• Multi‐attribute keys:
CREATE TABLE Sells (
bar CHAR(20),
beer VARCHAR(20),
price REAL,
PRIMARY KEY (bar, beer)
);
Declaring Keys
Relation Model (16 of 38)Defining DB Schema in SQL (3 of 7)
• The SQL standard allows DBMS implementers to make their own 
distinctions between PRIMARY KEY and UNIQUE.
• Example: Some DBMS might automatically create an index (data 
structure to speed search) in response to PRIMARY KEY, but not 
UNIQUE. 
• However, standard SQL requires these distinctions:
• There can be only one PRIMARY KEY for a relation, but several UNIQUE 
attributes.
• No attribute of a PRIMARY KEY can ever be NULL in any tuple.  But 
attributes declared UNIQUE may have NULL’s, and there may be several 
tuples with NULL.
PRIMARY KEY Versus UNIQUE
Relation Model (17 of 38)Defining DB Schema in SQL (4 of 7)
• DEFAULT <value> says that if there is no specific value known for this attribute’s 
component in some tuple, use the stated <value>.
CREATE TABLE Drinkers (
name CHAR(30) PRIMARY KEY,
addr CHAR(50)
DEFAULT ‘123 Sesame St.’,
phone CHAR(16)
);
• Try this. What will be the Sally tuple?
INSERT INTO Drinkers(name) VALUES(‘Sally’);
Default Values
Relation Model (18 of 38)Defining DB Schema in SQL (5 of 7)
• We may change a relation schema by adding a new attribute (“column”) 
by:
ALTER TABLE <name> ADD
<attribute declaration>;
• Example:
ALTER TABLE Bars ADD
phone CHAR(16) DEFAULT ‘unlisted’;
Adding Attributes
Relation Model (19 of 38)Defining DB Schema in SQL (6 of 7)
• Remove an attribute from a relation schema by:
ALTER TABLE <name>
DROP <attribute>;
• Example: we don’t really need the license attribute for bars:
ALTER TABLE Bars DROP license;
Deleting Attributes
Relation Model (20 of 38)Defining DB Schema in SQL (7 of 7)
ER to Relational Model
Relation Model (21 of 38)ER to Relational Model (0 of 17)
Basic Cases
Relation Model (22 of 38)ER to Relational Model (1 of 17)
Entity Set to Relation
Relation Model (23 of 38)
Product
name category
price
Product:
Name                      Category                    Price
gizmo                        gadgets                     $19.99
ER to Relational Model (2 of 17)
Q: Relationship  Relation? 
Relation Model (24 of 38)
makes Company
Product
name category
Stock price
nameStart Year
price
How to capture “Make” in a relation?
ER to Relational Model (3 of 17)
Relationship to Relation: Another Example
Relation Model (25 of 38)
Drinkers Beer
Favorite
nameaddr name manf
Likes
Married
Buddy
• Likes( )
• Favorite( )
• Buddy( )
• Married( )
husbandwife
ER to Relational Model (4 of 17)
Relationship to Relation: Another Example
Relation Model (26 of 38)
Drinkers BeersLikes
Likes(drinker, beer)
Favorite
Favorite(drinker, beer)
Married
husband
wife
Married(husband, wife)
name addr name manf
Buddy
ER to Relational Model (5 of 17)
Behind the Scene:
This was how relational DBMS started…
Relation Model (27 of 38)
Future users of large data banks must be 
protected from having to know how the 
data is organized in the machine (the 
internal representation).
ER to Relational Model (6 of 17)
Relation Model (28 of 38)ER to Relational Model (7 of 17)
Special Cases:
1) many one relations
2) weak entity sets
3) isa cases
Relation Model (29 of 38)ER to Relational Model (8 of 17)
• It is OK to combine the relation for an entity‐set E with the relation R
for a many‐one relationship from E to another entity set.
• Example: 
• Drinkers(name, addr), Favorite(drinker, beer) 

• Drinker1(name, addr, favoriteBeer).
Combining Relations
Relation Model (30 of 38)ER to Relational Model (9 of 17)
Drinkers BeerFavorite
nameaddr name manf
Can We Merge Many‐to‐Many?
Relation Model (31 of 38)ER to Relational Model (10 of 17)
Drinkers BeerFavorite
nameaddr name manfbar
Three approaches:
1. Object‐oriented: each entity belongs to exactly one 
class; create a relation for each class, with all its 
attributes.
2. E/R style: create one relation for each subclass, with 
only the key attribute(s) and attributes attached to 
that E.S.; entity represented in all relations to whose 
subclass/E.S. it belongs.
3. Use nulls : create one relation; entities have null in 
attributes that don’t belong to them.
Translating Subclass Entities: The Rules
Relation Model (32 of 38)ER to Relational Model (11 of 17)
Example
Relation Model (33 of 38)ER to Relational Model (12 of 17)
Beers
Ales
isa
name manf
color
Option #1: the OO Approach
Relation Model (34 of 38)ER to Relational Model (13 of 17)
name manf
Bud Busch
name manf color
Sumerbrew Pete’s Dark
Beers
Ales
isa
name manf
color
Option #2: the E/R Approach
Relation Model (35 of 38)ER to Relational Model (14 of 17)
name manf
Bud Busch
Sumerbrew Pete’s
name color
Sumerbrew Dark
Beers
Ales
isa
name manf
color
Option #3: The Null Value Approach
Relation Model (36 of 38)
Beers
Ales
isa
name manf
color
ER to Relational Model (15 of 17)
name manf color
Bud Busch Null
Sumerbrew Pete’s Dark
• Query 1: Find the colors of ales made by some company, say, Pete’s.
• Query 2: Find all beers made by Pete’s.
Q: What would work faster?
Relation Model (37 of 38)ER to Relational Model (16 of 17)
•O‐O approach good for queries like “find the color 
of ales made by Pete’s.”
• Just look in Ales relation.
•E/R approach good for queries like “find all beers 
(including ales) made by Pete’s.”
• Just look in Beers relation.
•Using nulls saves space unless there are lots of 
attributes that are usually null.
Comparisons
Relation Model (38 of 38)ER to Relational Model (17 of 17)
