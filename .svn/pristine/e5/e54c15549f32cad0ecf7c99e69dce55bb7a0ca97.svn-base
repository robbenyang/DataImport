1 
Instruc(on  Decoding	  
2 
Today’s  lecture  
  Instruc(on  Encoding  
  R-­‐type	  &	  I-­‐type	  encodings	  
  Instruc(on  Decoding  
  Operands	  
  Sign-­‐extending	  the	  immediate	  
  Decoding	  the	  ALU	  opera<on	  
3 
MIPS Instruction Review 
  MIPS provides arithmetic and logical operations:  
add  sub  mul  div  and  or  nor  xor!
!
  These are three register instructions; for example: 
  add  $14, $18, $3  # $14 = $18 + $3 
  mul  $22, $22, $11  # $22 = $22 x $11 
 
  For many instructions, 2nd source can be a constant: 
 
  addi $14, $18, 3  # $14 = $18 + 3 
  ori  $22, $22, 0xff  # $22 = $22 | 0xff 
 
4 
September 20, 2012 Introduction to CS232 4 
Writing an arithmetic program 
  Write MIPS code to compute the following expression? 
z = 4 + x*y – z; 
 
  Assume the following register allocation: 
  $13 = x, $20 = y, $15 = z 
 
5 
How  do  instruc(ons  control  the  datapath?  
  First  step  is  to  learn  how  instruc(ons  are  encoded  
A[31:0]
alu_op[2:0]
out[31:0]
B[31:0]
ALU
dataAregA
reset
w_en
dataBregB
w_reg
w_data
Register 
File
reset
clk
wr_enable
Rdest
Rt
Rs
6 
Machine  Language  
  Machine language is a binary format that can be stored 
in memory and decoded by the CPU. 
  MIPS machine language is designed to be easy to decode 
  Each MIPS instruction is the same length, 32 bits. 
  There are only three different instruction formats, 
which are very similar to each other. 
  We’ll see two of them today 
7 
R-type format 
  Register-to-register arithmetic instructions use the R-type format. 
 
  This format includes six different fields. 
— op is an operation code or opcode that selects a specific operation. 
— rs and rt are the first and second source registers. 
— rd is the destination register. 
— shamt is only used for shift instructions. 
— func is used together with op to select an arithmetic instruction.  
 
op rs rt rd shamt func 
6 bits 5 bits 5 bits 5 bits 5 bits 6 bits 
8 
R-type format 
  Register-to-register arithmetic instructions use the R-type format. 
 
  Example:  
op rs rt rd shamt func 
6 bits 5 bits 5 bits 5 bits 5 bits 6 bits 
add  $5, $10, $4!
9 
I-type format 
  Instructions with immediates all use the I-type format. 
 
  For uniformity, op, rs and rt are in the same positions as in R-type 
  The meaning of the register fields depends on the exact 
instruction. 
— For arithmetic instructions, rt is the destination and rs a source. 
  The imm field is a 16-bit signed two’s-complement value. 
  It can range from -32,768 to +32,767. 
op rs rt imm 
6 bits 5 bits 5 bits 16 bits 
10 
I-type format 
  Instructions with immediates all use the I-type format. 
 
  Example 
op rs rt imm 
6 bits 5 bits 5 bits 16 bits 
ori  $7, $2, 0xff!
11 
How  do  instruc(ons  control  the  datapath?  
  Some  of  the  fields  come  directly  from  instruc(ons.  
16
11
op
rs
rt
rd
-
func
imm
31
0
5
6
10
15
20
21
25
26 A[31:0]
alu_op[2:0]
out[31:0]
B[31:0]
ALU
dataAregA
reset
w_en
dataBregB
w_reg
w_data
Register 
File
reset
clk
wr_enable
Rdest
Rt
Rs
12 
Sign  Extension  
  Remember  how  to  do  sign-­‐extension?  
Sign 
Extender
out[31:0]
in[15:0]imm16
imm32
16
32
15  
31   0  
0  
13 
What  about  the  alu_op?  
  It  is  a  func(on  of  the  opcode  /  func  field.  
Instruction opcode func alu_op itype wr_enable 
add 
sub 
and 
or 
xor 
nor 
addi 
andi 
ori 
xori 
14 
Instruc(on  Decoder  
alu_op[2:0]
write_enable
itype
except
opcode[5:0]
funct[5:0]
MIPS decoder
wr_enable
itype
alu_op[2:0]
inst[5:0]
inst[31:26]
except
6
6
3
15 
Arithme(c  Machine  Datapath  
alu_op[2:0]
write_enable
itype
except
opcode[5:0]
funct[5:0]
MIPS decoder
A[31:0]
alu_op[2:0]
out[31:0]
B[31:0]
ALU
rsDatarsNum
reset
rdNum
rtDatartNum
rdWriteEnable
rdData
Register File
reset
clk
wr_enable
Rdest
Rt
Rs
zero
negative
overflow
0
1
wr_enable
itype
itype
alu_op[2:0]
Sign 
Extender
out[31:0]
in[15:0]
inst[31:0] 0
1
itype
inst[25:21]
inst[20:16]
inst[15:11]
inst[20:16]
inst[5:0]
inst[15:0]
inst[31:26]
except
Rt
Rd
imm16
imm32
5
5
5
16
32
6
6
32
32
32
32
32
3
3
