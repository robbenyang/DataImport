Kevin C. Chang
SQL2: Aggregates
CS411 Database Systems
• Aggregate
• Sum, Count, Max, Min, …
• Null values in aggregates
• Grouping
• Attributes after grouping
• Having clauses
• General form: Select‐From‐Where‐Group By‐Having
Concepts You Will Learn
SQL2: Aggregates (1 of 27)Default Section (1 of 1)
Why Do We Learn This?
SQL2: Aggregates (2 of 27)Why Do We Learn This? (0 of 1)
Q:  1) What is an “aggregate”? 
2) Why is it useful?
SQL2: Aggregates (3 of 27)Why Do We Learn This? (1 of 1)
Overview
SQL2: Aggregates (4 of 27)Overview (0 of 5)
• SUM, AVG, COUNT, MIN, and MAX can be applied to a column in a 
SELECT clause to produce that aggregation on the column.
• Also, COUNT(*) counts the number of tuples.
Aggregations
SQL2: Aggregates (5 of 27)Overview (1 of 5)
• From Sells(bar, beer, price), find the average price of Bud:
SELECT AVG(price)
FROM Sells
WHERE beer = ‘Bud’;
Example: Aggregation
SQL2: Aggregates (6 of 27)Overview (2 of 5)
•DISTINCT inside an aggregation causes duplicates 
to be eliminated before the aggregation.
•Example: find the number of different prices 
charged for Bud:
SELECT COUNT(DISTINCT price)
FROM Sells
WHERE beer = ‘Bud’;
Eliminating Duplicates in an Aggregation
SQL2: Aggregates (7 of 27)Overview (3 of 5)
• NULL never contributes to a sum, average, or count, and can never be 
the minimum or maximum of a column.
• But if there are no non‐NULL values in a column, then the result of 
the aggregation is NULL.
NULL’s Ignored in Aggregation
SQL2: Aggregates (8 of 27)Overview (4 of 5)
• The number of bars that sell Bud.
SELECT count(*)
FROM Sells
WHERE beer = ‘Bud’;
• The number of bars that sell Bud at a known price.
SELECT count(price)
FROM Sells
WHERE beer = ‘Bud’;
Example: Effect of NULL’s
SQL2: Aggregates (9 of 27)Overview (5 of 5)
Grouping
SQL2: Aggregates (10 of 27)Grouping (0 of 3)
• We may follow a SELECT‐FROM‐WHERE expression by GROUP BY and 
a list of attributes.
• The relation that results from the SELECT‐FROM‐WHERE is grouped 
according to the values of all those attributes, and any aggregation is 
applied only within each group.
Grouping
SQL2: Aggregates (11 of 27)Grouping (1 of 3)
• From Sells(bar, beer, price), find the average price for each beer:
SELECT beer, AVG(price)
FROM Sells
GROUP BY beer;
Example: Grouping
SQL2: Aggregates (12 of 27)Grouping (2 of 3)
•Fine for each drinker the average price of Bud at 
the bars they frequent:
SELECT drinker, AVG(price)
FROM Frequents, Sells
WHERE beer = ‘Bud’ AND
Frequents.bar = Sells.bar
GROUP BY drinker;
Example: Grouping
SQL2: Aggregates (13 of 27)Grouping (3 of 3)
Attributs after Grouping
SQL2: Aggregates (14 of 27)Attributs after Grouping (0 of 6)
• Select bar, min(price) from Sells
• Select bar, avg(price) from Sells
• Select bar, max(price) from Sells
Try These Queries at MySQL‐‐
SQL2: Aggregates (15 of 27)Attributs after Grouping (1 of 6)
• Select bar, min(price) from Sells
What’s Wrong with It?
SQL2: Aggregates (16 of 27)Attributs after Grouping (2 of 6)
SELECT bar, MIN(price)
FROM Sells;
Q: How to do it right, then?
SQL2: Aggregates (17 of 27)Attributs after Grouping (3 of 6)
• If any aggregation is used, then each element of the SELECT list 
must be either:
1. Aggregated, or
2. An attribute on the GROUP BY list.
Restriction on SELECT Lists With Aggregation
SQL2: Aggregates (18 of 27)Attributs after Grouping (4 of 6)
Behind the Scene: First Aggregate Query
SQL2: Aggregates (19 of 27)Attributs after Grouping (5 of 6)
Behind the Scene: How about this one?
SQL2: Aggregates (20 of 27)Attributs after Grouping (6 of 6)
Having Clauses
SQL2: Aggregates (21 of 27)Having Clauses (0 of 3)
• HAVING <condition> may follow a GROUP BY clause.
• If so, the condition applies to each group, and groups not satisfying 
the condition are eliminated.
HAVING Clauses
SQL2: Aggregates (22 of 27)Having Clauses (1 of 3)
• These conditions may refer to any relation or tuple‐variable in the 
FROM clause.
• They may refer to attributes of those relations, as long as the attribute 
makes sense within a group; i.e., it is either:
1. A grouping attribute, or
2. Aggregated.
Requirements on HAVING Conditions
SQL2: Aggregates (23 of 27)Having Clauses (2 of 3)
SELECT beer, AVG(price)
FROM Sells
GROUP BY beer
HAVING COUNT(bar) >= 3 OR beer = ‘michelob’;
Example
SQL2: Aggregates (24 of 27)Having Clauses (3 of 3)
Putting Together: General Form
SQL2: Aggregates (25 of 27)Putting Together: General Form (0 of 2)
SELECT S
FROM R1,…,Rn
WHERE C1
GROUP BY a1,…,ak
HAVING C2
S = may contain attributes a1,…,ak and/or any aggregates but NO OTHER 
ATTRIBUTES
C1 = is any condition on the attributes in R1,…,Rn
C2 = is any condition on aggregate expressions or grouping attributes
General form of Grouping and Aggregation
SQL2: Aggregates (26 of 27)Putting Together: General Form (1 of 2)
SELECT S
FROM R1,…,Rn
WHERE C1
GROUP BY a1,…,ak
HAVING C2
Evaluation steps:
1. Compute the FROM‐WHERE part, obtain a table with all attributes 
in R1,…,Rn
2. Group by the attributes a1,…,ak
3. Compute the aggregates in C2 and keep only groups satisfying C2
4. Compute aggregates in S and return the result
General form of Grouping and Aggregation
SQL2: Aggregates (27 of 27)Putting Together: General Form (2 of 2)
